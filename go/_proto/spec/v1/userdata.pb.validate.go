// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: spec/v1/userdata.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetId()); l < 16 || l > 1024 {
		err := UserValidationError{
			field:  "Id",
			reason: "value length must be between 16 and 1024 bytes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on UserDataRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserDataRequestMultiError, or nil if none found.
func (m *UserDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetJwt() == nil {
		err := UserDataRequestValidationError{
			field:  "Jwt",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetJwt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserDataRequestValidationError{
					field:  "Jwt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserDataRequestValidationError{
					field:  "Jwt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJwt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserDataRequestValidationError{
				field:  "Jwt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserDataRequestMultiError(errors)
	}

	return nil
}

// UserDataRequestMultiError is an error wrapping multiple validation errors
// returned by UserDataRequest.ValidateAll() if the designated constraints
// aren't met.
type UserDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserDataRequestMultiError) AllErrors() []error { return m }

// UserDataRequestValidationError is the validation error returned by
// UserDataRequest.Validate if the designated constraints aren't met.
type UserDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDataRequestValidationError) ErrorName() string { return "UserDataRequestValidationError" }

// Error satisfies the builtin error interface
func (e UserDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDataRequestValidationError{}

// Validate checks the field values on JWT with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *JWT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JWT with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in JWTMultiError, or nil if none found.
func (m *JWT) ValidateAll() error {
	return m.validate(true)
}

func (m *JWT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetToken()) < 1 {
		err := JWTValidationError{
			field:  "Token",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return JWTMultiError(errors)
	}

	return nil
}

// JWTMultiError is an error wrapping multiple validation errors returned by
// JWT.ValidateAll() if the designated constraints aren't met.
type JWTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JWTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JWTMultiError) AllErrors() []error { return m }

// JWTValidationError is the validation error returned by JWT.Validate if the
// designated constraints aren't met.
type JWTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JWTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JWTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JWTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JWTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JWTValidationError) ErrorName() string { return "JWTValidationError" }

// Error satisfies the builtin error interface
func (e JWTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJWT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JWTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JWTValidationError{}

// Validate checks the field values on UserDataResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserDataResponseMultiError, or nil if none found.
func (m *UserDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserDataResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserDataResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserDataResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserDataResponseMultiError(errors)
	}

	return nil
}

// UserDataResponseMultiError is an error wrapping multiple validation errors
// returned by UserDataResponse.ValidateAll() if the designated constraints
// aren't met.
type UserDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserDataResponseMultiError) AllErrors() []error { return m }

// UserDataResponseValidationError is the validation error returned by
// UserDataResponse.Validate if the designated constraints aren't met.
type UserDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDataResponseValidationError) ErrorName() string { return "UserDataResponseValidationError" }

// Error satisfies the builtin error interface
func (e UserDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDataResponseValidationError{}

// Validate checks the field values on CreateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserRequestMultiError, or nil if none found.
func (m *CreateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateUserRequestMultiError(errors)
	}

	return nil
}

// CreateUserRequestMultiError is an error wrapping multiple validation errors
// returned by CreateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserRequestMultiError) AllErrors() []error { return m }

// CreateUserRequestValidationError is the validation error returned by
// CreateUserRequest.Validate if the designated constraints aren't met.
type CreateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserRequestValidationError) ErrorName() string {
	return "CreateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserRequestValidationError{}

// Validate checks the field values on CreateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserResponseMultiError, or nil if none found.
func (m *CreateUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetJwt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserResponseValidationError{
					field:  "Jwt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserResponseValidationError{
					field:  "Jwt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJwt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserResponseValidationError{
				field:  "Jwt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateUserResponseMultiError(errors)
	}

	return nil
}

// CreateUserResponseMultiError is an error wrapping multiple validation errors
// returned by CreateUserResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserResponseMultiError) AllErrors() []error { return m }

// CreateUserResponseValidationError is the validation error returned by
// CreateUserResponse.Validate if the designated constraints aren't met.
type CreateUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserResponseValidationError) ErrorName() string {
	return "CreateUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserResponseValidationError{}

// Validate checks the field values on LoginAsAdminRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoginAsAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginAsAdminRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginAsAdminRequestMultiError, or nil if none found.
func (m *LoginAsAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginAsAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetPassword()) < 1 {
		err := LoginAsAdminRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LoginAsAdminRequestMultiError(errors)
	}

	return nil
}

// LoginAsAdminRequestMultiError is an error wrapping multiple validation
// errors returned by LoginAsAdminRequest.ValidateAll() if the designated
// constraints aren't met.
type LoginAsAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginAsAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginAsAdminRequestMultiError) AllErrors() []error { return m }

// LoginAsAdminRequestValidationError is the validation error returned by
// LoginAsAdminRequest.Validate if the designated constraints aren't met.
type LoginAsAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginAsAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginAsAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginAsAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginAsAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginAsAdminRequestValidationError) ErrorName() string {
	return "LoginAsAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LoginAsAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginAsAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginAsAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginAsAdminRequestValidationError{}

// Validate checks the field values on LoginAsAdminResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoginAsAdminResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginAsAdminResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginAsAdminResponseMultiError, or nil if none found.
func (m *LoginAsAdminResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginAsAdminResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAdminJwt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginAsAdminResponseValidationError{
					field:  "AdminJwt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginAsAdminResponseValidationError{
					field:  "AdminJwt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAdminJwt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginAsAdminResponseValidationError{
				field:  "AdminJwt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoginAsAdminResponseMultiError(errors)
	}

	return nil
}

// LoginAsAdminResponseMultiError is an error wrapping multiple validation
// errors returned by LoginAsAdminResponse.ValidateAll() if the designated
// constraints aren't met.
type LoginAsAdminResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginAsAdminResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginAsAdminResponseMultiError) AllErrors() []error { return m }

// LoginAsAdminResponseValidationError is the validation error returned by
// LoginAsAdminResponse.Validate if the designated constraints aren't met.
type LoginAsAdminResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginAsAdminResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginAsAdminResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginAsAdminResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginAsAdminResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginAsAdminResponseValidationError) ErrorName() string {
	return "LoginAsAdminResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LoginAsAdminResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginAsAdminResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginAsAdminResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginAsAdminResponseValidationError{}

// Validate checks the field values on Horse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Horse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Horse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in HorseMultiError, or nil if none found.
func (m *Horse) ValidateAll() error {
	return m.validate(true)
}

func (m *Horse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := HorseValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Horse_Name_Pattern.MatchString(m.GetName()) {
		err := HorseValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"\\\\p{Katakana}{2,9}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return HorseMultiError(errors)
	}

	return nil
}

// HorseMultiError is an error wrapping multiple validation errors returned by
// Horse.ValidateAll() if the designated constraints aren't met.
type HorseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HorseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HorseMultiError) AllErrors() []error { return m }

// HorseValidationError is the validation error returned by Horse.Validate if
// the designated constraints aren't met.
type HorseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HorseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HorseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HorseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HorseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HorseValidationError) ErrorName() string { return "HorseValidationError" }

// Error satisfies the builtin error interface
func (e HorseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHorse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HorseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HorseValidationError{}

var _Horse_Name_Pattern = regexp.MustCompile("\\p{Katakana}{2,9}")

// Validate checks the field values on HorseDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HorseDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HorseDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HorseDetailMultiError, or
// nil if none found.
func (m *HorseDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *HorseDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetData() == nil {
		err := HorseDetailValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HorseDetailValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HorseDetailValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HorseDetailValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetOwner()); l < 2 || l > 256 {
		err := HorseDetailValidationError{
			field:  "Owner",
			reason: "value length must be between 2 and 256 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Wins

	// no validation rules for Matches

	for idx, item := range m.GetHistories() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HorseDetailValidationError{
						field:  fmt.Sprintf("Histories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HorseDetailValidationError{
						field:  fmt.Sprintf("Histories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HorseDetailValidationError{
					field:  fmt.Sprintf("Histories[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Image != nil {

		if all {
			switch v := interface{}(m.GetImage()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HorseDetailValidationError{
						field:  "Image",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HorseDetailValidationError{
						field:  "Image",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetImage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HorseDetailValidationError{
					field:  "Image",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Next != nil {

		if all {
			switch v := interface{}(m.GetNext()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HorseDetailValidationError{
						field:  "Next",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HorseDetailValidationError{
						field:  "Next",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNext()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HorseDetailValidationError{
					field:  "Next",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return HorseDetailMultiError(errors)
	}

	return nil
}

// HorseDetailMultiError is an error wrapping multiple validation errors
// returned by HorseDetail.ValidateAll() if the designated constraints aren't met.
type HorseDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HorseDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HorseDetailMultiError) AllErrors() []error { return m }

// HorseDetailValidationError is the validation error returned by
// HorseDetail.Validate if the designated constraints aren't met.
type HorseDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HorseDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HorseDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HorseDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HorseDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HorseDetailValidationError) ErrorName() string { return "HorseDetailValidationError" }

// Error satisfies the builtin error interface
func (e HorseDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHorseDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HorseDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HorseDetailValidationError{}

// Validate checks the field values on HorseDetails with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HorseDetails) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HorseDetails with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HorseDetailsMultiError, or
// nil if none found.
func (m *HorseDetails) ValidateAll() error {
	return m.validate(true)
}

func (m *HorseDetails) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetHorseDetails() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HorseDetailsValidationError{
						field:  fmt.Sprintf("HorseDetails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HorseDetailsValidationError{
						field:  fmt.Sprintf("HorseDetails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HorseDetailsValidationError{
					field:  fmt.Sprintf("HorseDetails[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return HorseDetailsMultiError(errors)
	}

	return nil
}

// HorseDetailsMultiError is an error wrapping multiple validation errors
// returned by HorseDetails.ValidateAll() if the designated constraints aren't met.
type HorseDetailsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HorseDetailsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HorseDetailsMultiError) AllErrors() []error { return m }

// HorseDetailsValidationError is the validation error returned by
// HorseDetails.Validate if the designated constraints aren't met.
type HorseDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HorseDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HorseDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HorseDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HorseDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HorseDetailsValidationError) ErrorName() string { return "HorseDetailsValidationError" }

// Error satisfies the builtin error interface
func (e HorseDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHorseDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HorseDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HorseDetailsValidationError{}

// Validate checks the field values on HorseDataRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *HorseDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HorseDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HorseDataRequestMultiError, or nil if none found.
func (m *HorseDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HorseDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := HorseDataRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return HorseDataRequestMultiError(errors)
	}

	return nil
}

// HorseDataRequestMultiError is an error wrapping multiple validation errors
// returned by HorseDataRequest.ValidateAll() if the designated constraints
// aren't met.
type HorseDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HorseDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HorseDataRequestMultiError) AllErrors() []error { return m }

// HorseDataRequestValidationError is the validation error returned by
// HorseDataRequest.Validate if the designated constraints aren't met.
type HorseDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HorseDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HorseDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HorseDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HorseDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HorseDataRequestValidationError) ErrorName() string { return "HorseDataRequestValidationError" }

// Error satisfies the builtin error interface
func (e HorseDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHorseDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HorseDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HorseDataRequestValidationError{}

// Validate checks the field values on HorseDataResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *HorseDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HorseDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HorseDataResponseMultiError, or nil if none found.
func (m *HorseDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *HorseDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetHorse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HorseDataResponseValidationError{
					field:  "Horse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HorseDataResponseValidationError{
					field:  "Horse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHorse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HorseDataResponseValidationError{
				field:  "Horse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HorseDataResponseMultiError(errors)
	}

	return nil
}

// HorseDataResponseMultiError is an error wrapping multiple validation errors
// returned by HorseDataResponse.ValidateAll() if the designated constraints
// aren't met.
type HorseDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HorseDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HorseDataResponseMultiError) AllErrors() []error { return m }

// HorseDataResponseValidationError is the validation error returned by
// HorseDataResponse.Validate if the designated constraints aren't met.
type HorseDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HorseDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HorseDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HorseDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HorseDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HorseDataResponseValidationError) ErrorName() string {
	return "HorseDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e HorseDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHorseDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HorseDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HorseDataResponseValidationError{}

// Validate checks the field values on AllHorseDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AllHorseDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllHorseDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AllHorseDataRequestMultiError, or nil if none found.
func (m *AllHorseDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AllHorseDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AllHorseDataRequestMultiError(errors)
	}

	return nil
}

// AllHorseDataRequestMultiError is an error wrapping multiple validation
// errors returned by AllHorseDataRequest.ValidateAll() if the designated
// constraints aren't met.
type AllHorseDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllHorseDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllHorseDataRequestMultiError) AllErrors() []error { return m }

// AllHorseDataRequestValidationError is the validation error returned by
// AllHorseDataRequest.Validate if the designated constraints aren't met.
type AllHorseDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllHorseDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllHorseDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllHorseDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllHorseDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllHorseDataRequestValidationError) ErrorName() string {
	return "AllHorseDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AllHorseDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllHorseDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllHorseDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllHorseDataRequestValidationError{}

// Validate checks the field values on AllHorseDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AllHorseDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllHorseDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AllHorseDataResponseMultiError, or nil if none found.
func (m *AllHorseDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AllHorseDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetHorses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AllHorseDataResponseValidationError{
						field:  fmt.Sprintf("Horses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AllHorseDataResponseValidationError{
						field:  fmt.Sprintf("Horses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AllHorseDataResponseValidationError{
					field:  fmt.Sprintf("Horses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AllHorseDataResponseMultiError(errors)
	}

	return nil
}

// AllHorseDataResponseMultiError is an error wrapping multiple validation
// errors returned by AllHorseDataResponse.ValidateAll() if the designated
// constraints aren't met.
type AllHorseDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllHorseDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllHorseDataResponseMultiError) AllErrors() []error { return m }

// AllHorseDataResponseValidationError is the validation error returned by
// AllHorseDataResponse.Validate if the designated constraints aren't met.
type AllHorseDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllHorseDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllHorseDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllHorseDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllHorseDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllHorseDataResponseValidationError) ErrorName() string {
	return "AllHorseDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AllHorseDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllHorseDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllHorseDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllHorseDataResponseValidationError{}

// Validate checks the field values on RegisterHorseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterHorseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterHorseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterHorseRequestMultiError, or nil if none found.
func (m *RegisterHorseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterHorseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_RegisterHorseRequest_Name_Pattern.MatchString(m.GetName()) {
		err := RegisterHorseRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"\\\\p{Katakana}{2,9}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetOwner()); l < 2 || l > 256 {
		err := RegisterHorseRequestValidationError{
			field:  "Owner",
			reason: "value length must be between 2 and 256 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAdminJwt() == nil {
		err := RegisterHorseRequestValidationError{
			field:  "AdminJwt",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAdminJwt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterHorseRequestValidationError{
					field:  "AdminJwt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterHorseRequestValidationError{
					field:  "AdminJwt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAdminJwt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterHorseRequestValidationError{
				field:  "AdminJwt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterHorseRequestMultiError(errors)
	}

	return nil
}

// RegisterHorseRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterHorseRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterHorseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterHorseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterHorseRequestMultiError) AllErrors() []error { return m }

// RegisterHorseRequestValidationError is the validation error returned by
// RegisterHorseRequest.Validate if the designated constraints aren't met.
type RegisterHorseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterHorseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterHorseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterHorseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterHorseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterHorseRequestValidationError) ErrorName() string {
	return "RegisterHorseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterHorseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterHorseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterHorseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterHorseRequestValidationError{}

var _RegisterHorseRequest_Name_Pattern = regexp.MustCompile("\\p{Katakana}{2,9}")

// Validate checks the field values on RegisterHorseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterHorseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterHorseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterHorseResponseMultiError, or nil if none found.
func (m *RegisterHorseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterHorseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RegisterHorseResponseMultiError(errors)
	}

	return nil
}

// RegisterHorseResponseMultiError is an error wrapping multiple validation
// errors returned by RegisterHorseResponse.ValidateAll() if the designated
// constraints aren't met.
type RegisterHorseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterHorseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterHorseResponseMultiError) AllErrors() []error { return m }

// RegisterHorseResponseValidationError is the validation error returned by
// RegisterHorseResponse.Validate if the designated constraints aren't met.
type RegisterHorseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterHorseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterHorseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterHorseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterHorseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterHorseResponseValidationError) ErrorName() string {
	return "RegisterHorseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterHorseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterHorseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterHorseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterHorseResponseValidationError{}

// Validate checks the field values on Race with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Race) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Race with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RaceMultiError, or nil if none found.
func (m *Race) ValidateAll() error {
	return m.validate(true)
}

func (m *Race) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := RaceValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := RaceValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOrder() < 1 {
		err := RaceValidationError{
			field:  "Order",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetStart() == nil {
		err := RaceValidationError{
			field:  "Start",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsFinished

	if len(errors) > 0 {
		return RaceMultiError(errors)
	}

	return nil
}

// RaceMultiError is an error wrapping multiple validation errors returned by
// Race.ValidateAll() if the designated constraints aren't met.
type RaceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RaceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RaceMultiError) AllErrors() []error { return m }

// RaceValidationError is the validation error returned by Race.Validate if the
// designated constraints aren't met.
type RaceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RaceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RaceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RaceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RaceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RaceValidationError) ErrorName() string { return "RaceValidationError" }

// Error satisfies the builtin error interface
func (e RaceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRace.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RaceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RaceValidationError{}

// Validate checks the field values on RaceOrder with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RaceOrder) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RaceOrder with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RaceOrderMultiError, or nil
// if none found.
func (m *RaceOrder) ValidateAll() error {
	return m.validate(true)
}

func (m *RaceOrder) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.OrderOneof.(type) {

	case *RaceOrder_Order:

		if m.GetOrder() < 1 {
			err := RaceOrderValidationError{
				field:  "Order",
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *RaceOrder_Note:

		if _, ok := _RaceOrder_Note_NotInLookup[m.GetNote()]; ok {
			err := RaceOrderValidationError{
				field:  "Note",
				reason: "value must not be in list [0]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if _, ok := RaceOrder_NoteType_name[int32(m.GetNote())]; !ok {
			err := RaceOrderValidationError{
				field:  "Note",
				reason: "value must be one of the defined enum values",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	default:
		err := RaceOrderValidationError{
			field:  "OrderOneof",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return RaceOrderMultiError(errors)
	}

	return nil
}

// RaceOrderMultiError is an error wrapping multiple validation errors returned
// by RaceOrder.ValidateAll() if the designated constraints aren't met.
type RaceOrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RaceOrderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RaceOrderMultiError) AllErrors() []error { return m }

// RaceOrderValidationError is the validation error returned by
// RaceOrder.Validate if the designated constraints aren't met.
type RaceOrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RaceOrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RaceOrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RaceOrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RaceOrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RaceOrderValidationError) ErrorName() string { return "RaceOrderValidationError" }

// Error satisfies the builtin error interface
func (e RaceOrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRaceOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RaceOrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RaceOrderValidationError{}

var _RaceOrder_Note_NotInLookup = map[RaceOrder_NoteType]struct{}{
	0: {},
}

// Validate checks the field values on RaceDetail with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RaceDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RaceDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RaceDetailMultiError, or
// nil if none found.
func (m *RaceDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *RaceDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetData() == nil {
		err := RaceDetailValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RaceDetailValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RaceDetailValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RaceDetailValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Description

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RaceDetailValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RaceDetailValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RaceDetailValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GetVoteBegin() == nil {
		err := RaceDetailValidationError{
			field:  "VoteBegin",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetVoteEnd() == nil {
		err := RaceDetailValidationError{
			field:  "VoteEnd",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RaceDetailMultiError(errors)
	}

	return nil
}

// RaceDetailMultiError is an error wrapping multiple validation errors
// returned by RaceDetail.ValidateAll() if the designated constraints aren't met.
type RaceDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RaceDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RaceDetailMultiError) AllErrors() []error { return m }

// RaceDetailValidationError is the validation error returned by
// RaceDetail.Validate if the designated constraints aren't met.
type RaceDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RaceDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RaceDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RaceDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RaceDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RaceDetailValidationError) ErrorName() string { return "RaceDetailValidationError" }

// Error satisfies the builtin error interface
func (e RaceDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRaceDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RaceDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RaceDetailValidationError{}

// Validate checks the field values on RaceDataRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RaceDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RaceDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RaceDataRequestMultiError, or nil if none found.
func (m *RaceDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RaceDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := RaceDataRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RaceDataRequestMultiError(errors)
	}

	return nil
}

// RaceDataRequestMultiError is an error wrapping multiple validation errors
// returned by RaceDataRequest.ValidateAll() if the designated constraints
// aren't met.
type RaceDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RaceDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RaceDataRequestMultiError) AllErrors() []error { return m }

// RaceDataRequestValidationError is the validation error returned by
// RaceDataRequest.Validate if the designated constraints aren't met.
type RaceDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RaceDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RaceDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RaceDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RaceDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RaceDataRequestValidationError) ErrorName() string { return "RaceDataRequestValidationError" }

// Error satisfies the builtin error interface
func (e RaceDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRaceDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RaceDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RaceDataRequestValidationError{}

// Validate checks the field values on RaceDataResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RaceDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RaceDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RaceDataResponseMultiError, or nil if none found.
func (m *RaceDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RaceDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRace()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RaceDataResponseValidationError{
					field:  "Race",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RaceDataResponseValidationError{
					field:  "Race",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RaceDataResponseValidationError{
				field:  "Race",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RaceDataResponseMultiError(errors)
	}

	return nil
}

// RaceDataResponseMultiError is an error wrapping multiple validation errors
// returned by RaceDataResponse.ValidateAll() if the designated constraints
// aren't met.
type RaceDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RaceDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RaceDataResponseMultiError) AllErrors() []error { return m }

// RaceDataResponseValidationError is the validation error returned by
// RaceDataResponse.Validate if the designated constraints aren't met.
type RaceDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RaceDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RaceDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RaceDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RaceDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RaceDataResponseValidationError) ErrorName() string { return "RaceDataResponseValidationError" }

// Error satisfies the builtin error interface
func (e RaceDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRaceDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RaceDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RaceDataResponseValidationError{}

// Validate checks the field values on RangeRaceDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RangeRaceDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RangeRaceDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RangeRaceDataRequestMultiError, or nil if none found.
func (m *RangeRaceDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RangeRaceDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Begin != nil {

		if all {
			switch v := interface{}(m.GetBegin()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RangeRaceDataRequestValidationError{
						field:  "Begin",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RangeRaceDataRequestValidationError{
						field:  "Begin",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBegin()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RangeRaceDataRequestValidationError{
					field:  "Begin",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.End != nil {

		if all {
			switch v := interface{}(m.GetEnd()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RangeRaceDataRequestValidationError{
						field:  "End",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RangeRaceDataRequestValidationError{
						field:  "End",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEnd()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RangeRaceDataRequestValidationError{
					field:  "End",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RangeRaceDataRequestMultiError(errors)
	}

	return nil
}

// RangeRaceDataRequestMultiError is an error wrapping multiple validation
// errors returned by RangeRaceDataRequest.ValidateAll() if the designated
// constraints aren't met.
type RangeRaceDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RangeRaceDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RangeRaceDataRequestMultiError) AllErrors() []error { return m }

// RangeRaceDataRequestValidationError is the validation error returned by
// RangeRaceDataRequest.Validate if the designated constraints aren't met.
type RangeRaceDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RangeRaceDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RangeRaceDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RangeRaceDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RangeRaceDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RangeRaceDataRequestValidationError) ErrorName() string {
	return "RangeRaceDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RangeRaceDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRangeRaceDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RangeRaceDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RangeRaceDataRequestValidationError{}

// Validate checks the field values on RangeRaceDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RangeRaceDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RangeRaceDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RangeRaceDataResponseMultiError, or nil if none found.
func (m *RangeRaceDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RangeRaceDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRaces() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RangeRaceDataResponseValidationError{
						field:  fmt.Sprintf("Races[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RangeRaceDataResponseValidationError{
						field:  fmt.Sprintf("Races[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RangeRaceDataResponseValidationError{
					field:  fmt.Sprintf("Races[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RangeRaceDataResponseMultiError(errors)
	}

	return nil
}

// RangeRaceDataResponseMultiError is an error wrapping multiple validation
// errors returned by RangeRaceDataResponse.ValidateAll() if the designated
// constraints aren't met.
type RangeRaceDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RangeRaceDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RangeRaceDataResponseMultiError) AllErrors() []error { return m }

// RangeRaceDataResponseValidationError is the validation error returned by
// RangeRaceDataResponse.Validate if the designated constraints aren't met.
type RangeRaceDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RangeRaceDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RangeRaceDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RangeRaceDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RangeRaceDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RangeRaceDataResponseValidationError) ErrorName() string {
	return "RangeRaceDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RangeRaceDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRangeRaceDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RangeRaceDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RangeRaceDataResponseValidationError{}

// Validate checks the field values on RegisterRaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterRaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterRaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterRaceRequestMultiError, or nil if none found.
func (m *RegisterRaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterRaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := RegisterRaceRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOrder() < 1 {
		err := RegisterRaceRequestValidationError{
			field:  "Order",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetStart() == nil {
		err := RegisterRaceRequestValidationError{
			field:  "Start",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	if m.GetAdminJwt() == nil {
		err := RegisterRaceRequestValidationError{
			field:  "AdminJwt",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAdminJwt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterRaceRequestValidationError{
					field:  "AdminJwt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterRaceRequestValidationError{
					field:  "AdminJwt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAdminJwt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterRaceRequestValidationError{
				field:  "AdminJwt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterRaceRequestMultiError(errors)
	}

	return nil
}

// RegisterRaceRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterRaceRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterRaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterRaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterRaceRequestMultiError) AllErrors() []error { return m }

// RegisterRaceRequestValidationError is the validation error returned by
// RegisterRaceRequest.Validate if the designated constraints aren't met.
type RegisterRaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRaceRequestValidationError) ErrorName() string {
	return "RegisterRaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterRaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterRaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRaceRequestValidationError{}

// Validate checks the field values on RegisterRaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterRaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterRaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterRaceResponseMultiError, or nil if none found.
func (m *RegisterRaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterRaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RegisterRaceResponseMultiError(errors)
	}

	return nil
}

// RegisterRaceResponseMultiError is an error wrapping multiple validation
// errors returned by RegisterRaceResponse.ValidateAll() if the designated
// constraints aren't met.
type RegisterRaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterRaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterRaceResponseMultiError) AllErrors() []error { return m }

// RegisterRaceResponseValidationError is the validation error returned by
// RegisterRaceResponse.Validate if the designated constraints aren't met.
type RegisterRaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRaceResponseValidationError) ErrorName() string {
	return "RegisterRaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterRaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterRaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRaceResponseValidationError{}

// Validate checks the field values on VoteRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VoteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VoteRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VoteRequestMultiError, or
// nil if none found.
func (m *VoteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VoteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Race

	// no validation rules for Horse

	if all {
		switch v := interface{}(m.GetJwt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VoteRequestValidationError{
					field:  "Jwt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VoteRequestValidationError{
					field:  "Jwt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJwt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VoteRequestValidationError{
				field:  "Jwt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VoteRequestMultiError(errors)
	}

	return nil
}

// VoteRequestMultiError is an error wrapping multiple validation errors
// returned by VoteRequest.ValidateAll() if the designated constraints aren't met.
type VoteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VoteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VoteRequestMultiError) AllErrors() []error { return m }

// VoteRequestValidationError is the validation error returned by
// VoteRequest.Validate if the designated constraints aren't met.
type VoteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VoteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VoteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VoteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VoteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VoteRequestValidationError) ErrorName() string { return "VoteRequestValidationError" }

// Error satisfies the builtin error interface
func (e VoteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVoteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VoteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VoteRequestValidationError{}

// Validate checks the field values on VoteResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VoteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VoteResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VoteResponseMultiError, or
// nil if none found.
func (m *VoteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VoteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VoteResponseMultiError(errors)
	}

	return nil
}

// VoteResponseMultiError is an error wrapping multiple validation errors
// returned by VoteResponse.ValidateAll() if the designated constraints aren't met.
type VoteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VoteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VoteResponseMultiError) AllErrors() []error { return m }

// VoteResponseValidationError is the validation error returned by
// VoteResponse.Validate if the designated constraints aren't met.
type VoteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VoteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VoteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VoteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VoteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VoteResponseValidationError) ErrorName() string { return "VoteResponseValidationError" }

// Error satisfies the builtin error interface
func (e VoteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVoteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VoteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VoteResponseValidationError{}

// Validate checks the field values on HorseDetail_Image with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *HorseDetail_Image) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HorseDetail_Image with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HorseDetail_ImageMultiError, or nil if none found.
func (m *HorseDetail_Image) ValidateAll() error {
	return m.validate(true)
}

func (m *HorseDetail_Image) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _HorseDetail_Image_Type_NotInLookup[m.GetType()]; ok {
		err := HorseDetail_ImageValidationError{
			field:  "Type",
			reason: "value must not be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := HorseDetail_Image_ImageType_name[int32(m.GetType())]; !ok {
		err := HorseDetail_ImageValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetData()) < 1 {
		err := HorseDetail_ImageValidationError{
			field:  "Data",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return HorseDetail_ImageMultiError(errors)
	}

	return nil
}

// HorseDetail_ImageMultiError is an error wrapping multiple validation errors
// returned by HorseDetail_Image.ValidateAll() if the designated constraints
// aren't met.
type HorseDetail_ImageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HorseDetail_ImageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HorseDetail_ImageMultiError) AllErrors() []error { return m }

// HorseDetail_ImageValidationError is the validation error returned by
// HorseDetail_Image.Validate if the designated constraints aren't met.
type HorseDetail_ImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HorseDetail_ImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HorseDetail_ImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HorseDetail_ImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HorseDetail_ImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HorseDetail_ImageValidationError) ErrorName() string {
	return "HorseDetail_ImageValidationError"
}

// Error satisfies the builtin error interface
func (e HorseDetail_ImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHorseDetail_Image.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HorseDetail_ImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HorseDetail_ImageValidationError{}

var _HorseDetail_Image_Type_NotInLookup = map[HorseDetail_Image_ImageType]struct{}{
	0: {},
}

// Validate checks the field values on HorseDetail_History with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HorseDetail_History) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HorseDetail_History with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HorseDetail_HistoryMultiError, or nil if none found.
func (m *HorseDetail_History) ValidateAll() error {
	return m.validate(true)
}

func (m *HorseDetail_History) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetRace() == nil {
		err := HorseDetail_HistoryValidationError{
			field:  "Race",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetRace()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HorseDetail_HistoryValidationError{
					field:  "Race",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HorseDetail_HistoryValidationError{
					field:  "Race",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HorseDetail_HistoryValidationError{
				field:  "Race",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetOrder() < 1 {
		err := HorseDetail_HistoryValidationError{
			field:  "Order",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetResult() == nil {
		err := HorseDetail_HistoryValidationError{
			field:  "Result",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HorseDetail_HistoryValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HorseDetail_HistoryValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HorseDetail_HistoryValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HorseDetail_HistoryMultiError(errors)
	}

	return nil
}

// HorseDetail_HistoryMultiError is an error wrapping multiple validation
// errors returned by HorseDetail_History.ValidateAll() if the designated
// constraints aren't met.
type HorseDetail_HistoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HorseDetail_HistoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HorseDetail_HistoryMultiError) AllErrors() []error { return m }

// HorseDetail_HistoryValidationError is the validation error returned by
// HorseDetail_History.Validate if the designated constraints aren't met.
type HorseDetail_HistoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HorseDetail_HistoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HorseDetail_HistoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HorseDetail_HistoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HorseDetail_HistoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HorseDetail_HistoryValidationError) ErrorName() string {
	return "HorseDetail_HistoryValidationError"
}

// Error satisfies the builtin error interface
func (e HorseDetail_HistoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHorseDetail_History.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HorseDetail_HistoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HorseDetail_HistoryValidationError{}

// Validate checks the field values on RaceDetail_Member with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RaceDetail_Member) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RaceDetail_Member with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RaceDetail_MemberMultiError, or nil if none found.
func (m *RaceDetail_Member) ValidateAll() error {
	return m.validate(true)
}

func (m *RaceDetail_Member) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrder() == nil {
		err := RaceDetail_MemberValidationError{
			field:  "Order",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOrder()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RaceDetail_MemberValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RaceDetail_MemberValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrder()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RaceDetail_MemberValidationError{
				field:  "Order",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetHorse() == nil {
		err := RaceDetail_MemberValidationError{
			field:  "Horse",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetHorse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RaceDetail_MemberValidationError{
					field:  "Horse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RaceDetail_MemberValidationError{
					field:  "Horse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHorse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RaceDetail_MemberValidationError{
				field:  "Horse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetOdds() < 1 {
		err := RaceDetail_MemberValidationError{
			field:  "Odds",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPopularity() < 1 {
		err := RaceDetail_MemberValidationError{
			field:  "Popularity",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RaceDetail_MemberMultiError(errors)
	}

	return nil
}

// RaceDetail_MemberMultiError is an error wrapping multiple validation errors
// returned by RaceDetail_Member.ValidateAll() if the designated constraints
// aren't met.
type RaceDetail_MemberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RaceDetail_MemberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RaceDetail_MemberMultiError) AllErrors() []error { return m }

// RaceDetail_MemberValidationError is the validation error returned by
// RaceDetail_Member.Validate if the designated constraints aren't met.
type RaceDetail_MemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RaceDetail_MemberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RaceDetail_MemberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RaceDetail_MemberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RaceDetail_MemberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RaceDetail_MemberValidationError) ErrorName() string {
	return "RaceDetail_MemberValidationError"
}

// Error satisfies the builtin error interface
func (e RaceDetail_MemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRaceDetail_Member.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RaceDetail_MemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RaceDetail_MemberValidationError{}

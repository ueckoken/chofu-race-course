// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: spec/v1/userdata.proto

package v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/ueckoken/chofu-race-course/go/_proto/spec/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// UserDataServiceName is the fully-qualified name of the UserDataService service.
	UserDataServiceName = "spec.v1.UserDataService"
	// HorseDataServiceName is the fully-qualified name of the HorseDataService service.
	HorseDataServiceName = "spec.v1.HorseDataService"
	// RaceDataServiceName is the fully-qualified name of the RaceDataService service.
	RaceDataServiceName = "spec.v1.RaceDataService"
	// VoteServiceName is the fully-qualified name of the VoteService service.
	VoteServiceName = "spec.v1.VoteService"
)

// UserDataServiceClient is a client for the spec.v1.UserDataService service.
type UserDataServiceClient interface {
	// 要ユーザ認証: UserIdからUser情報を取得する
	UserData(context.Context, *connect_go.Request[v1.UserDataRequest]) (*connect_go.Response[v1.UserDataResponse], error)
	// 新規Userを作成する
	CreateUser(context.Context, *connect_go.Request[v1.CreateUserRequest]) (*connect_go.Response[v1.CreateUserResponse], error)
	// 管理者としてログインを試みる
	LoginAsAdmin(context.Context, *connect_go.Request[v1.LoginAsAdminRequest]) (*connect_go.Response[v1.LoginAsAdminResponse], error)
}

// NewUserDataServiceClient constructs a client for the spec.v1.UserDataService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserDataServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) UserDataServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &userDataServiceClient{
		userData: connect_go.NewClient[v1.UserDataRequest, v1.UserDataResponse](
			httpClient,
			baseURL+"/spec.v1.UserDataService/UserData",
			opts...,
		),
		createUser: connect_go.NewClient[v1.CreateUserRequest, v1.CreateUserResponse](
			httpClient,
			baseURL+"/spec.v1.UserDataService/CreateUser",
			opts...,
		),
		loginAsAdmin: connect_go.NewClient[v1.LoginAsAdminRequest, v1.LoginAsAdminResponse](
			httpClient,
			baseURL+"/spec.v1.UserDataService/LoginAsAdmin",
			opts...,
		),
	}
}

// userDataServiceClient implements UserDataServiceClient.
type userDataServiceClient struct {
	userData     *connect_go.Client[v1.UserDataRequest, v1.UserDataResponse]
	createUser   *connect_go.Client[v1.CreateUserRequest, v1.CreateUserResponse]
	loginAsAdmin *connect_go.Client[v1.LoginAsAdminRequest, v1.LoginAsAdminResponse]
}

// UserData calls spec.v1.UserDataService.UserData.
func (c *userDataServiceClient) UserData(ctx context.Context, req *connect_go.Request[v1.UserDataRequest]) (*connect_go.Response[v1.UserDataResponse], error) {
	return c.userData.CallUnary(ctx, req)
}

// CreateUser calls spec.v1.UserDataService.CreateUser.
func (c *userDataServiceClient) CreateUser(ctx context.Context, req *connect_go.Request[v1.CreateUserRequest]) (*connect_go.Response[v1.CreateUserResponse], error) {
	return c.createUser.CallUnary(ctx, req)
}

// LoginAsAdmin calls spec.v1.UserDataService.LoginAsAdmin.
func (c *userDataServiceClient) LoginAsAdmin(ctx context.Context, req *connect_go.Request[v1.LoginAsAdminRequest]) (*connect_go.Response[v1.LoginAsAdminResponse], error) {
	return c.loginAsAdmin.CallUnary(ctx, req)
}

// UserDataServiceHandler is an implementation of the spec.v1.UserDataService service.
type UserDataServiceHandler interface {
	// 要ユーザ認証: UserIdからUser情報を取得する
	UserData(context.Context, *connect_go.Request[v1.UserDataRequest]) (*connect_go.Response[v1.UserDataResponse], error)
	// 新規Userを作成する
	CreateUser(context.Context, *connect_go.Request[v1.CreateUserRequest]) (*connect_go.Response[v1.CreateUserResponse], error)
	// 管理者としてログインを試みる
	LoginAsAdmin(context.Context, *connect_go.Request[v1.LoginAsAdminRequest]) (*connect_go.Response[v1.LoginAsAdminResponse], error)
}

// NewUserDataServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserDataServiceHandler(svc UserDataServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/spec.v1.UserDataService/UserData", connect_go.NewUnaryHandler(
		"/spec.v1.UserDataService/UserData",
		svc.UserData,
		opts...,
	))
	mux.Handle("/spec.v1.UserDataService/CreateUser", connect_go.NewUnaryHandler(
		"/spec.v1.UserDataService/CreateUser",
		svc.CreateUser,
		opts...,
	))
	mux.Handle("/spec.v1.UserDataService/LoginAsAdmin", connect_go.NewUnaryHandler(
		"/spec.v1.UserDataService/LoginAsAdmin",
		svc.LoginAsAdmin,
		opts...,
	))
	return "/spec.v1.UserDataService/", mux
}

// UnimplementedUserDataServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserDataServiceHandler struct{}

func (UnimplementedUserDataServiceHandler) UserData(context.Context, *connect_go.Request[v1.UserDataRequest]) (*connect_go.Response[v1.UserDataResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("spec.v1.UserDataService.UserData is not implemented"))
}

func (UnimplementedUserDataServiceHandler) CreateUser(context.Context, *connect_go.Request[v1.CreateUserRequest]) (*connect_go.Response[v1.CreateUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("spec.v1.UserDataService.CreateUser is not implemented"))
}

func (UnimplementedUserDataServiceHandler) LoginAsAdmin(context.Context, *connect_go.Request[v1.LoginAsAdminRequest]) (*connect_go.Response[v1.LoginAsAdminResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("spec.v1.UserDataService.LoginAsAdmin is not implemented"))
}

// HorseDataServiceClient is a client for the spec.v1.HorseDataService service.
type HorseDataServiceClient interface {
	HorseData(context.Context, *connect_go.Request[v1.HorseDataRequest]) (*connect_go.Response[v1.HorseDataResponse], error)
	AllHorseData(context.Context, *connect_go.Request[v1.AllHorseDataRequest]) (*connect_go.Response[v1.AllHorseDataResponse], error)
	// 要Admin認証
	RegisterHorse(context.Context, *connect_go.Request[v1.RegisterHorseRequest]) (*connect_go.Response[v1.RegisterHorseResponse], error)
	// 要Admin認証
	EditHorse(context.Context, *connect_go.Request[v1.EditHorseRequest]) (*connect_go.Response[v1.EditHorseResponse], error)
}

// NewHorseDataServiceClient constructs a client for the spec.v1.HorseDataService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHorseDataServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) HorseDataServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &horseDataServiceClient{
		horseData: connect_go.NewClient[v1.HorseDataRequest, v1.HorseDataResponse](
			httpClient,
			baseURL+"/spec.v1.HorseDataService/HorseData",
			opts...,
		),
		allHorseData: connect_go.NewClient[v1.AllHorseDataRequest, v1.AllHorseDataResponse](
			httpClient,
			baseURL+"/spec.v1.HorseDataService/AllHorseData",
			opts...,
		),
		registerHorse: connect_go.NewClient[v1.RegisterHorseRequest, v1.RegisterHorseResponse](
			httpClient,
			baseURL+"/spec.v1.HorseDataService/RegisterHorse",
			opts...,
		),
		editHorse: connect_go.NewClient[v1.EditHorseRequest, v1.EditHorseResponse](
			httpClient,
			baseURL+"/spec.v1.HorseDataService/EditHorse",
			opts...,
		),
	}
}

// horseDataServiceClient implements HorseDataServiceClient.
type horseDataServiceClient struct {
	horseData     *connect_go.Client[v1.HorseDataRequest, v1.HorseDataResponse]
	allHorseData  *connect_go.Client[v1.AllHorseDataRequest, v1.AllHorseDataResponse]
	registerHorse *connect_go.Client[v1.RegisterHorseRequest, v1.RegisterHorseResponse]
	editHorse     *connect_go.Client[v1.EditHorseRequest, v1.EditHorseResponse]
}

// HorseData calls spec.v1.HorseDataService.HorseData.
func (c *horseDataServiceClient) HorseData(ctx context.Context, req *connect_go.Request[v1.HorseDataRequest]) (*connect_go.Response[v1.HorseDataResponse], error) {
	return c.horseData.CallUnary(ctx, req)
}

// AllHorseData calls spec.v1.HorseDataService.AllHorseData.
func (c *horseDataServiceClient) AllHorseData(ctx context.Context, req *connect_go.Request[v1.AllHorseDataRequest]) (*connect_go.Response[v1.AllHorseDataResponse], error) {
	return c.allHorseData.CallUnary(ctx, req)
}

// RegisterHorse calls spec.v1.HorseDataService.RegisterHorse.
func (c *horseDataServiceClient) RegisterHorse(ctx context.Context, req *connect_go.Request[v1.RegisterHorseRequest]) (*connect_go.Response[v1.RegisterHorseResponse], error) {
	return c.registerHorse.CallUnary(ctx, req)
}

// EditHorse calls spec.v1.HorseDataService.EditHorse.
func (c *horseDataServiceClient) EditHorse(ctx context.Context, req *connect_go.Request[v1.EditHorseRequest]) (*connect_go.Response[v1.EditHorseResponse], error) {
	return c.editHorse.CallUnary(ctx, req)
}

// HorseDataServiceHandler is an implementation of the spec.v1.HorseDataService service.
type HorseDataServiceHandler interface {
	HorseData(context.Context, *connect_go.Request[v1.HorseDataRequest]) (*connect_go.Response[v1.HorseDataResponse], error)
	AllHorseData(context.Context, *connect_go.Request[v1.AllHorseDataRequest]) (*connect_go.Response[v1.AllHorseDataResponse], error)
	// 要Admin認証
	RegisterHorse(context.Context, *connect_go.Request[v1.RegisterHorseRequest]) (*connect_go.Response[v1.RegisterHorseResponse], error)
	// 要Admin認証
	EditHorse(context.Context, *connect_go.Request[v1.EditHorseRequest]) (*connect_go.Response[v1.EditHorseResponse], error)
}

// NewHorseDataServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHorseDataServiceHandler(svc HorseDataServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/spec.v1.HorseDataService/HorseData", connect_go.NewUnaryHandler(
		"/spec.v1.HorseDataService/HorseData",
		svc.HorseData,
		opts...,
	))
	mux.Handle("/spec.v1.HorseDataService/AllHorseData", connect_go.NewUnaryHandler(
		"/spec.v1.HorseDataService/AllHorseData",
		svc.AllHorseData,
		opts...,
	))
	mux.Handle("/spec.v1.HorseDataService/RegisterHorse", connect_go.NewUnaryHandler(
		"/spec.v1.HorseDataService/RegisterHorse",
		svc.RegisterHorse,
		opts...,
	))
	mux.Handle("/spec.v1.HorseDataService/EditHorse", connect_go.NewUnaryHandler(
		"/spec.v1.HorseDataService/EditHorse",
		svc.EditHorse,
		opts...,
	))
	return "/spec.v1.HorseDataService/", mux
}

// UnimplementedHorseDataServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedHorseDataServiceHandler struct{}

func (UnimplementedHorseDataServiceHandler) HorseData(context.Context, *connect_go.Request[v1.HorseDataRequest]) (*connect_go.Response[v1.HorseDataResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("spec.v1.HorseDataService.HorseData is not implemented"))
}

func (UnimplementedHorseDataServiceHandler) AllHorseData(context.Context, *connect_go.Request[v1.AllHorseDataRequest]) (*connect_go.Response[v1.AllHorseDataResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("spec.v1.HorseDataService.AllHorseData is not implemented"))
}

func (UnimplementedHorseDataServiceHandler) RegisterHorse(context.Context, *connect_go.Request[v1.RegisterHorseRequest]) (*connect_go.Response[v1.RegisterHorseResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("spec.v1.HorseDataService.RegisterHorse is not implemented"))
}

func (UnimplementedHorseDataServiceHandler) EditHorse(context.Context, *connect_go.Request[v1.EditHorseRequest]) (*connect_go.Response[v1.EditHorseResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("spec.v1.HorseDataService.EditHorse is not implemented"))
}

// RaceDataServiceClient is a client for the spec.v1.RaceDataService service.
type RaceDataServiceClient interface {
	AllRaceData(context.Context, *connect_go.Request[v1.AllRaceDataRequest]) (*connect_go.Response[v1.AllRaceDataResponse], error)
	RaceData(context.Context, *connect_go.Request[v1.RaceDataRequest]) (*connect_go.Response[v1.RaceDataResponse], error)
	// 要Admin認証
	RegisterRace(context.Context, *connect_go.Request[v1.RegisterRaceRequest]) (*connect_go.Response[v1.RegisterRaceResponse], error)
	// 要Admin認証、結果の入力に使う(他のデータにも影響が発生する)
	RegisterRaceResult(context.Context, *connect_go.Request[v1.RegisterRaceResultRequest]) (*connect_go.Response[v1.RegisterRaceResultResponse], error)
	// 要Admin認証、データの編集に使う
	EditRace(context.Context, *connect_go.Request[v1.EditRaceRequest]) (*connect_go.Response[v1.EditRaceResponse], error)
	// 要Admin認証、データの編集に使う
	EraseRace(context.Context, *connect_go.Request[v1.EraseRaceRequest]) (*connect_go.Response[v1.EraseRaceResponse], error)
}

// NewRaceDataServiceClient constructs a client for the spec.v1.RaceDataService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRaceDataServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) RaceDataServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &raceDataServiceClient{
		allRaceData: connect_go.NewClient[v1.AllRaceDataRequest, v1.AllRaceDataResponse](
			httpClient,
			baseURL+"/spec.v1.RaceDataService/AllRaceData",
			opts...,
		),
		raceData: connect_go.NewClient[v1.RaceDataRequest, v1.RaceDataResponse](
			httpClient,
			baseURL+"/spec.v1.RaceDataService/RaceData",
			opts...,
		),
		registerRace: connect_go.NewClient[v1.RegisterRaceRequest, v1.RegisterRaceResponse](
			httpClient,
			baseURL+"/spec.v1.RaceDataService/RegisterRace",
			opts...,
		),
		registerRaceResult: connect_go.NewClient[v1.RegisterRaceResultRequest, v1.RegisterRaceResultResponse](
			httpClient,
			baseURL+"/spec.v1.RaceDataService/RegisterRaceResult",
			opts...,
		),
		editRace: connect_go.NewClient[v1.EditRaceRequest, v1.EditRaceResponse](
			httpClient,
			baseURL+"/spec.v1.RaceDataService/EditRace",
			opts...,
		),
		eraseRace: connect_go.NewClient[v1.EraseRaceRequest, v1.EraseRaceResponse](
			httpClient,
			baseURL+"/spec.v1.RaceDataService/EraseRace",
			opts...,
		),
	}
}

// raceDataServiceClient implements RaceDataServiceClient.
type raceDataServiceClient struct {
	allRaceData        *connect_go.Client[v1.AllRaceDataRequest, v1.AllRaceDataResponse]
	raceData           *connect_go.Client[v1.RaceDataRequest, v1.RaceDataResponse]
	registerRace       *connect_go.Client[v1.RegisterRaceRequest, v1.RegisterRaceResponse]
	registerRaceResult *connect_go.Client[v1.RegisterRaceResultRequest, v1.RegisterRaceResultResponse]
	editRace           *connect_go.Client[v1.EditRaceRequest, v1.EditRaceResponse]
	eraseRace          *connect_go.Client[v1.EraseRaceRequest, v1.EraseRaceResponse]
}

// AllRaceData calls spec.v1.RaceDataService.AllRaceData.
func (c *raceDataServiceClient) AllRaceData(ctx context.Context, req *connect_go.Request[v1.AllRaceDataRequest]) (*connect_go.Response[v1.AllRaceDataResponse], error) {
	return c.allRaceData.CallUnary(ctx, req)
}

// RaceData calls spec.v1.RaceDataService.RaceData.
func (c *raceDataServiceClient) RaceData(ctx context.Context, req *connect_go.Request[v1.RaceDataRequest]) (*connect_go.Response[v1.RaceDataResponse], error) {
	return c.raceData.CallUnary(ctx, req)
}

// RegisterRace calls spec.v1.RaceDataService.RegisterRace.
func (c *raceDataServiceClient) RegisterRace(ctx context.Context, req *connect_go.Request[v1.RegisterRaceRequest]) (*connect_go.Response[v1.RegisterRaceResponse], error) {
	return c.registerRace.CallUnary(ctx, req)
}

// RegisterRaceResult calls spec.v1.RaceDataService.RegisterRaceResult.
func (c *raceDataServiceClient) RegisterRaceResult(ctx context.Context, req *connect_go.Request[v1.RegisterRaceResultRequest]) (*connect_go.Response[v1.RegisterRaceResultResponse], error) {
	return c.registerRaceResult.CallUnary(ctx, req)
}

// EditRace calls spec.v1.RaceDataService.EditRace.
func (c *raceDataServiceClient) EditRace(ctx context.Context, req *connect_go.Request[v1.EditRaceRequest]) (*connect_go.Response[v1.EditRaceResponse], error) {
	return c.editRace.CallUnary(ctx, req)
}

// EraseRace calls spec.v1.RaceDataService.EraseRace.
func (c *raceDataServiceClient) EraseRace(ctx context.Context, req *connect_go.Request[v1.EraseRaceRequest]) (*connect_go.Response[v1.EraseRaceResponse], error) {
	return c.eraseRace.CallUnary(ctx, req)
}

// RaceDataServiceHandler is an implementation of the spec.v1.RaceDataService service.
type RaceDataServiceHandler interface {
	AllRaceData(context.Context, *connect_go.Request[v1.AllRaceDataRequest]) (*connect_go.Response[v1.AllRaceDataResponse], error)
	RaceData(context.Context, *connect_go.Request[v1.RaceDataRequest]) (*connect_go.Response[v1.RaceDataResponse], error)
	// 要Admin認証
	RegisterRace(context.Context, *connect_go.Request[v1.RegisterRaceRequest]) (*connect_go.Response[v1.RegisterRaceResponse], error)
	// 要Admin認証、結果の入力に使う(他のデータにも影響が発生する)
	RegisterRaceResult(context.Context, *connect_go.Request[v1.RegisterRaceResultRequest]) (*connect_go.Response[v1.RegisterRaceResultResponse], error)
	// 要Admin認証、データの編集に使う
	EditRace(context.Context, *connect_go.Request[v1.EditRaceRequest]) (*connect_go.Response[v1.EditRaceResponse], error)
	// 要Admin認証、データの編集に使う
	EraseRace(context.Context, *connect_go.Request[v1.EraseRaceRequest]) (*connect_go.Response[v1.EraseRaceResponse], error)
}

// NewRaceDataServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRaceDataServiceHandler(svc RaceDataServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/spec.v1.RaceDataService/AllRaceData", connect_go.NewUnaryHandler(
		"/spec.v1.RaceDataService/AllRaceData",
		svc.AllRaceData,
		opts...,
	))
	mux.Handle("/spec.v1.RaceDataService/RaceData", connect_go.NewUnaryHandler(
		"/spec.v1.RaceDataService/RaceData",
		svc.RaceData,
		opts...,
	))
	mux.Handle("/spec.v1.RaceDataService/RegisterRace", connect_go.NewUnaryHandler(
		"/spec.v1.RaceDataService/RegisterRace",
		svc.RegisterRace,
		opts...,
	))
	mux.Handle("/spec.v1.RaceDataService/RegisterRaceResult", connect_go.NewUnaryHandler(
		"/spec.v1.RaceDataService/RegisterRaceResult",
		svc.RegisterRaceResult,
		opts...,
	))
	mux.Handle("/spec.v1.RaceDataService/EditRace", connect_go.NewUnaryHandler(
		"/spec.v1.RaceDataService/EditRace",
		svc.EditRace,
		opts...,
	))
	mux.Handle("/spec.v1.RaceDataService/EraseRace", connect_go.NewUnaryHandler(
		"/spec.v1.RaceDataService/EraseRace",
		svc.EraseRace,
		opts...,
	))
	return "/spec.v1.RaceDataService/", mux
}

// UnimplementedRaceDataServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRaceDataServiceHandler struct{}

func (UnimplementedRaceDataServiceHandler) AllRaceData(context.Context, *connect_go.Request[v1.AllRaceDataRequest]) (*connect_go.Response[v1.AllRaceDataResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("spec.v1.RaceDataService.AllRaceData is not implemented"))
}

func (UnimplementedRaceDataServiceHandler) RaceData(context.Context, *connect_go.Request[v1.RaceDataRequest]) (*connect_go.Response[v1.RaceDataResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("spec.v1.RaceDataService.RaceData is not implemented"))
}

func (UnimplementedRaceDataServiceHandler) RegisterRace(context.Context, *connect_go.Request[v1.RegisterRaceRequest]) (*connect_go.Response[v1.RegisterRaceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("spec.v1.RaceDataService.RegisterRace is not implemented"))
}

func (UnimplementedRaceDataServiceHandler) RegisterRaceResult(context.Context, *connect_go.Request[v1.RegisterRaceResultRequest]) (*connect_go.Response[v1.RegisterRaceResultResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("spec.v1.RaceDataService.RegisterRaceResult is not implemented"))
}

func (UnimplementedRaceDataServiceHandler) EditRace(context.Context, *connect_go.Request[v1.EditRaceRequest]) (*connect_go.Response[v1.EditRaceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("spec.v1.RaceDataService.EditRace is not implemented"))
}

func (UnimplementedRaceDataServiceHandler) EraseRace(context.Context, *connect_go.Request[v1.EraseRaceRequest]) (*connect_go.Response[v1.EraseRaceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("spec.v1.RaceDataService.EraseRace is not implemented"))
}

// VoteServiceClient is a client for the spec.v1.VoteService service.
type VoteServiceClient interface {
	// 要ユーザ認証: 投票する
	Vote(context.Context, *connect_go.Request[v1.VoteRequest]) (*connect_go.Response[v1.VoteResponse], error)
}

// NewVoteServiceClient constructs a client for the spec.v1.VoteService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVoteServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) VoteServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &voteServiceClient{
		vote: connect_go.NewClient[v1.VoteRequest, v1.VoteResponse](
			httpClient,
			baseURL+"/spec.v1.VoteService/Vote",
			opts...,
		),
	}
}

// voteServiceClient implements VoteServiceClient.
type voteServiceClient struct {
	vote *connect_go.Client[v1.VoteRequest, v1.VoteResponse]
}

// Vote calls spec.v1.VoteService.Vote.
func (c *voteServiceClient) Vote(ctx context.Context, req *connect_go.Request[v1.VoteRequest]) (*connect_go.Response[v1.VoteResponse], error) {
	return c.vote.CallUnary(ctx, req)
}

// VoteServiceHandler is an implementation of the spec.v1.VoteService service.
type VoteServiceHandler interface {
	// 要ユーザ認証: 投票する
	Vote(context.Context, *connect_go.Request[v1.VoteRequest]) (*connect_go.Response[v1.VoteResponse], error)
}

// NewVoteServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVoteServiceHandler(svc VoteServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/spec.v1.VoteService/Vote", connect_go.NewUnaryHandler(
		"/spec.v1.VoteService/Vote",
		svc.Vote,
		opts...,
	))
	return "/spec.v1.VoteService/", mux
}

// UnimplementedVoteServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedVoteServiceHandler struct{}

func (UnimplementedVoteServiceHandler) Vote(context.Context, *connect_go.Request[v1.VoteRequest]) (*connect_go.Response[v1.VoteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("spec.v1.VoteService.Vote is not implemented"))
}

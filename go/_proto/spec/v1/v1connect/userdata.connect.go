// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: spec/v1/userdata.proto

package v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/ueckoken/chofu-race-course/go/_proto/spec/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// UserDataServiceName is the fully-qualified name of the UserDataService service.
	UserDataServiceName = "spec.v1.UserDataService"
	// HorseDataServiceName is the fully-qualified name of the HorseDataService service.
	HorseDataServiceName = "spec.v1.HorseDataService"
	// RaceDataServiceName is the fully-qualified name of the RaceDataService service.
	RaceDataServiceName = "spec.v1.RaceDataService"
)

// UserDataServiceClient is a client for the spec.v1.UserDataService service.
type UserDataServiceClient interface {
	UserData(context.Context, *connect_go.Request[v1.UserDataRequest]) (*connect_go.Response[v1.UserDataResponse], error)
}

// NewUserDataServiceClient constructs a client for the spec.v1.UserDataService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserDataServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) UserDataServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &userDataServiceClient{
		userData: connect_go.NewClient[v1.UserDataRequest, v1.UserDataResponse](
			httpClient,
			baseURL+"/spec.v1.UserDataService/UserData",
			opts...,
		),
	}
}

// userDataServiceClient implements UserDataServiceClient.
type userDataServiceClient struct {
	userData *connect_go.Client[v1.UserDataRequest, v1.UserDataResponse]
}

// UserData calls spec.v1.UserDataService.UserData.
func (c *userDataServiceClient) UserData(ctx context.Context, req *connect_go.Request[v1.UserDataRequest]) (*connect_go.Response[v1.UserDataResponse], error) {
	return c.userData.CallUnary(ctx, req)
}

// UserDataServiceHandler is an implementation of the spec.v1.UserDataService service.
type UserDataServiceHandler interface {
	UserData(context.Context, *connect_go.Request[v1.UserDataRequest]) (*connect_go.Response[v1.UserDataResponse], error)
}

// NewUserDataServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserDataServiceHandler(svc UserDataServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/spec.v1.UserDataService/UserData", connect_go.NewUnaryHandler(
		"/spec.v1.UserDataService/UserData",
		svc.UserData,
		opts...,
	))
	return "/spec.v1.UserDataService/", mux
}

// UnimplementedUserDataServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserDataServiceHandler struct{}

func (UnimplementedUserDataServiceHandler) UserData(context.Context, *connect_go.Request[v1.UserDataRequest]) (*connect_go.Response[v1.UserDataResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("spec.v1.UserDataService.UserData is not implemented"))
}

// HorseDataServiceClient is a client for the spec.v1.HorseDataService service.
type HorseDataServiceClient interface {
	HorseData(context.Context, *connect_go.Request[v1.HorseDataRequest]) (*connect_go.Response[v1.HorseDataResponse], error)
	AllHorseData(context.Context, *connect_go.Request[v1.AllHorseDataRequest]) (*connect_go.Response[v1.AllHorseDataResponse], error)
}

// NewHorseDataServiceClient constructs a client for the spec.v1.HorseDataService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHorseDataServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) HorseDataServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &horseDataServiceClient{
		horseData: connect_go.NewClient[v1.HorseDataRequest, v1.HorseDataResponse](
			httpClient,
			baseURL+"/spec.v1.HorseDataService/HorseData",
			opts...,
		),
		allHorseData: connect_go.NewClient[v1.AllHorseDataRequest, v1.AllHorseDataResponse](
			httpClient,
			baseURL+"/spec.v1.HorseDataService/AllHorseData",
			opts...,
		),
	}
}

// horseDataServiceClient implements HorseDataServiceClient.
type horseDataServiceClient struct {
	horseData    *connect_go.Client[v1.HorseDataRequest, v1.HorseDataResponse]
	allHorseData *connect_go.Client[v1.AllHorseDataRequest, v1.AllHorseDataResponse]
}

// HorseData calls spec.v1.HorseDataService.HorseData.
func (c *horseDataServiceClient) HorseData(ctx context.Context, req *connect_go.Request[v1.HorseDataRequest]) (*connect_go.Response[v1.HorseDataResponse], error) {
	return c.horseData.CallUnary(ctx, req)
}

// AllHorseData calls spec.v1.HorseDataService.AllHorseData.
func (c *horseDataServiceClient) AllHorseData(ctx context.Context, req *connect_go.Request[v1.AllHorseDataRequest]) (*connect_go.Response[v1.AllHorseDataResponse], error) {
	return c.allHorseData.CallUnary(ctx, req)
}

// HorseDataServiceHandler is an implementation of the spec.v1.HorseDataService service.
type HorseDataServiceHandler interface {
	HorseData(context.Context, *connect_go.Request[v1.HorseDataRequest]) (*connect_go.Response[v1.HorseDataResponse], error)
	AllHorseData(context.Context, *connect_go.Request[v1.AllHorseDataRequest]) (*connect_go.Response[v1.AllHorseDataResponse], error)
}

// NewHorseDataServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHorseDataServiceHandler(svc HorseDataServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/spec.v1.HorseDataService/HorseData", connect_go.NewUnaryHandler(
		"/spec.v1.HorseDataService/HorseData",
		svc.HorseData,
		opts...,
	))
	mux.Handle("/spec.v1.HorseDataService/AllHorseData", connect_go.NewUnaryHandler(
		"/spec.v1.HorseDataService/AllHorseData",
		svc.AllHorseData,
		opts...,
	))
	return "/spec.v1.HorseDataService/", mux
}

// UnimplementedHorseDataServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedHorseDataServiceHandler struct{}

func (UnimplementedHorseDataServiceHandler) HorseData(context.Context, *connect_go.Request[v1.HorseDataRequest]) (*connect_go.Response[v1.HorseDataResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("spec.v1.HorseDataService.HorseData is not implemented"))
}

func (UnimplementedHorseDataServiceHandler) AllHorseData(context.Context, *connect_go.Request[v1.AllHorseDataRequest]) (*connect_go.Response[v1.AllHorseDataResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("spec.v1.HorseDataService.AllHorseData is not implemented"))
}

// RaceDataServiceClient is a client for the spec.v1.RaceDataService service.
type RaceDataServiceClient interface {
	RangeRaceData(context.Context, *connect_go.Request[v1.RangeRaceDataRequest]) (*connect_go.Response[v1.RangeRaceDataResponse], error)
	RaceData(context.Context, *connect_go.Request[v1.RaceDataRequest]) (*connect_go.Response[v1.RaceDataResponse], error)
}

// NewRaceDataServiceClient constructs a client for the spec.v1.RaceDataService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRaceDataServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) RaceDataServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &raceDataServiceClient{
		rangeRaceData: connect_go.NewClient[v1.RangeRaceDataRequest, v1.RangeRaceDataResponse](
			httpClient,
			baseURL+"/spec.v1.RaceDataService/RangeRaceData",
			opts...,
		),
		raceData: connect_go.NewClient[v1.RaceDataRequest, v1.RaceDataResponse](
			httpClient,
			baseURL+"/spec.v1.RaceDataService/RaceData",
			opts...,
		),
	}
}

// raceDataServiceClient implements RaceDataServiceClient.
type raceDataServiceClient struct {
	rangeRaceData *connect_go.Client[v1.RangeRaceDataRequest, v1.RangeRaceDataResponse]
	raceData      *connect_go.Client[v1.RaceDataRequest, v1.RaceDataResponse]
}

// RangeRaceData calls spec.v1.RaceDataService.RangeRaceData.
func (c *raceDataServiceClient) RangeRaceData(ctx context.Context, req *connect_go.Request[v1.RangeRaceDataRequest]) (*connect_go.Response[v1.RangeRaceDataResponse], error) {
	return c.rangeRaceData.CallUnary(ctx, req)
}

// RaceData calls spec.v1.RaceDataService.RaceData.
func (c *raceDataServiceClient) RaceData(ctx context.Context, req *connect_go.Request[v1.RaceDataRequest]) (*connect_go.Response[v1.RaceDataResponse], error) {
	return c.raceData.CallUnary(ctx, req)
}

// RaceDataServiceHandler is an implementation of the spec.v1.RaceDataService service.
type RaceDataServiceHandler interface {
	RangeRaceData(context.Context, *connect_go.Request[v1.RangeRaceDataRequest]) (*connect_go.Response[v1.RangeRaceDataResponse], error)
	RaceData(context.Context, *connect_go.Request[v1.RaceDataRequest]) (*connect_go.Response[v1.RaceDataResponse], error)
}

// NewRaceDataServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRaceDataServiceHandler(svc RaceDataServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/spec.v1.RaceDataService/RangeRaceData", connect_go.NewUnaryHandler(
		"/spec.v1.RaceDataService/RangeRaceData",
		svc.RangeRaceData,
		opts...,
	))
	mux.Handle("/spec.v1.RaceDataService/RaceData", connect_go.NewUnaryHandler(
		"/spec.v1.RaceDataService/RaceData",
		svc.RaceData,
		opts...,
	))
	return "/spec.v1.RaceDataService/", mux
}

// UnimplementedRaceDataServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRaceDataServiceHandler struct{}

func (UnimplementedRaceDataServiceHandler) RangeRaceData(context.Context, *connect_go.Request[v1.RangeRaceDataRequest]) (*connect_go.Response[v1.RangeRaceDataResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("spec.v1.RaceDataService.RangeRaceData is not implemented"))
}

func (UnimplementedRaceDataServiceHandler) RaceData(context.Context, *connect_go.Request[v1.RaceDataRequest]) (*connect_go.Response[v1.RaceDataResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("spec.v1.RaceDataService.RaceData is not implemented"))
}

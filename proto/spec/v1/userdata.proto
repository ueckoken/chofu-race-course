syntax = "proto3";
package spec.v1;
option go_package = "github.com/ueckoken/chofu-race-course/go/_proto/spec/v1";
import "google/protobuf/timestamp.proto";

// ユーザのデータをやり取りするサービス
service UserDataService {
  rpc UserData(UserDataRequest) returns (UserDataResponse) {}
}
// ユーザを表現する型
message User {
  // ユーザID。他のIDはuint64であるが、ユーザIDのみJWTを使う都合上string。
  string id = 1;
}
message UserDataRequest {
  // ユーザID。他のIDはuint64であるが、ユーザIDのみJWTを使う都合上string。
  string user_id = 1;
}
message UserDataResponse {
  User user = 1;
}

service HorseDataService {
  rpc HorseData(HorseDataRequest) returns (HorseDataResponse) {}
  rpc AllHorseData(AllHorseDataRequest) returns (AllHorseDataResponse) {}
}

message Horse {
  uint64 id = 1;
  string name = 2;
}

// 出走履歴のそれぞれ
message History {
  // 出走したレース
  Race race = 1;
  // TODO: 分からん。誰か書いて。
  uint64 order = 2;
  // 順位。最も早くゴールしたときに1。
  uint64 result = 3;
}

message HorseDetail {
  string name = 1;
  string owner = 2;
  uint64 wins = 3;
  uint64 matches = 4;
  optional uint64 next = 5;
  repeated History histories = 6;
}

message HorseDataRequest {
  uint64 id = 1;
}
message HorseDataResponse {
  HorseDetail horse = 1;
}
message AllHorseDataRequest {}
message AllHorseDataResponse {
  repeated Horse horses = 1;
}

service RaceDataService {
  rpc RangeRaceData(RangeRaceDataRequest) returns (RangeRaceDataResponse){}
  rpc RaceData(RaceDataRequest) returns (RaceDataResponse){}
}
message Race {
  uint64 id = 1;
  string name = 2;
  uint64 order = 3;
  google.protobuf.Timestamp start = 4;
}
message Member {
  uint64 order = 1;
  uint64 result = 2;
  Horse horse = 3;
  double odds = 4;
  uint64 popularity = 5;
}
message Result {
  Horse horse = 1;
  uint64 order = 2;
  uint64 return = 3;
}
message RaceDetail {
  uint64 id = 1;
  string description = 2;
  uint64 order = 3;
  bool is_finished = 4;
  repeated Member member = 5;
  Result result = 6;
  google.protobuf.Timestamp start = 7;
  google.protobuf.Timestamp vote_begin = 8;
  google.protobuf.Timestamp vote_end = 9;
}
message RangeRaceDataRequest {
  // 指定した時間を含む、指定した時間からのデータを取得する。指定しなかったときは0(=1970年1月1日)と見なす。
  optional google.protobuf.Timestamp begin = 1;
  // 指定した時間を含む、指定した時間までのデータを取得する。指定しなかったときは取得できる最新まで取得する。
  optional google.protobuf.Timestamp end = 2;
}
message RangeRaceDataResponse {
  repeated Race races = 1;
}
message RaceDataRequest{
  uint64 race_id = 1;
}
message RaceDataResponse{
  RaceDetail race = 1;
}

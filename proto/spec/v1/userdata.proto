syntax = "proto3";

package spec.v1;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/ueckoken/chofu-race-course/go/_proto/spec/v1";

// ユーザのデータをやり取りするサービス
service UserDataService {
  // 要ユーザ認証: UserIdからUser情報を取得する
  rpc UserData(UserDataRequest) returns (UserDataResponse) {}
  // 新規Userを作成する
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {}
}
// ユーザを表現する型
message User {
  // ユーザID。他のIDはuint32であるが、ユーザIDのみJWTを使う都合上string。
  string id = 1;
}
message UserDataRequest {
  JWT jwt = 1;
}
//JWTトークン
message JWT {
  string token = 1;
}
message UserDataResponse {
  User user = 1;
}
message CreateUserRequest {
  User user = 1 [deprecated = true];
}
message CreateUserResponse {
  User user = 1;
  JWT jwt = 2;
}

service HorseDataService {
  rpc HorseData(HorseDataRequest) returns (HorseDataResponse) {}
  rpc AllHorseData(AllHorseDataRequest) returns (AllHorseDataResponse) {}
  rpc RegisterHorse(RegisterHorseRequest) returns (RegisterHorseResponse) {}
}
message Horse {
  uint32 id = 1;
  // 馬の名前
  string name = 2;
}
message HorseDetail {
  Horse data = 1;
  string owner = 2;
  message Image {
    enum ImageType {
      IMAGE_TYPE_UNSPECIFIED = 0;
      IMAGE_TYPE_PNG = 1;
      IMAGE_TYPE_JPEG = 2;
      IMAGE_TYPE_GIF = 3;
    }
    // 拡張子
    ImageType type = 1;
    // base64形式
    bytes data = 2;
  }
  optional Image image = 3;
  // 勝利数
  uint32 wins = 4;
  // 試合数
  uint32 matches = 5;
  // 次走、未定ならnull
  optional Race next = 6;
  // 出走履歴のそれぞれ
  message History {
    // 出走したレース
    Race race = 1;
    // その日の何番目のレースか
    uint32 order = 2;
    // 順位
    RaceOrder result = 3;
  }
  repeated History histories = 7;
}
message HorseDataRequest {
  uint32 id = 1;
}
message HorseDataResponse {
  HorseDetail horse = 1;
}
message AllHorseDataRequest {}
message AllHorseDataResponse {
  repeated Horse horses = 1;
}
// HorseDetailの初期値 id: id++, image: null, wins: 0, matches: 0, next: null, histories: []
message RegisterHorseRequest {
  string name = 1;
  // 所有者名
  string owner = 2;
}
message RegisterHorseResponse {}

service RaceDataService {
  rpc RangeRaceData(RangeRaceDataRequest) returns (RangeRaceDataResponse) {}
  rpc RaceData(RaceDataRequest) returns (RaceDataResponse) {}
  rpc RegisterRace(RegisterRaceRequest) returns (RegisterRaceResponse) {}
}
message Race {
  uint32 id = 1;
  string name = 2;
  uint32 order = 3;
  google.protobuf.Timestamp start = 4;
  bool is_finished = 5;
}
message RaceOrder {
  enum NoteType {
    NOTE_TYPE_UNSPECIFIED = 0;
    // 出走取消
    NOTE_TYPE_CANCEL = 1;
    // 競争中止
    NOTE_TYPE_GIVEUP = 2;
  }
  oneof order_oneof {
    // 順位。最も早くゴールしたときに1。
    uint32 order = 1;
    NoteType note = 2;
  }
}
message RaceDetail {
  Race data = 1;
  string description = 2;
  message Member {
    RaceOrder order = 1;
    Horse horse = 2;
    double odds = 3;
    uint32 popularity = 4;
  }
  repeated Member members = 4;
  google.protobuf.Timestamp vote_begin = 5;
  google.protobuf.Timestamp vote_end = 6;
}
message RaceDataRequest {
  uint32 id = 1;
}
message RaceDataResponse {
  RaceDetail race = 1;
}
message RangeRaceDataRequest {
  // 指定した時間を含む、指定した時間からのデータを取得する。指定しなかったときは0(=1970年1月1日)と見なす。
  optional google.protobuf.Timestamp begin = 1;
  // 指定した時間を含む、指定した時間までのデータを取得する。指定しなかったときは取得できる最新まで取得する。
  optional google.protobuf.Timestamp end = 2;
}
message RangeRaceDataResponse {
  repeated Race races = 1;
}
// RaceDetailの初期値 id: id++, is_finished: false, members: [], vote_begin: start - n, vote_end: start - m
message RegisterRaceRequest {
  string name = 1;
  // その日の何番目のレースか
  uint32 order = 2;
  // 出走時刻
  google.protobuf.Timestamp start = 3;
  // コースなどの詳細説明
  string description = 4;
}
message RegisterRaceResponse {}

service VoteService {
  // 要ユーザ認証: 投票する
  rpc Vote(VoteRequest) returns (VoteResponse) {}
}
message VoteRequest {
  // 投票するレースのID
  uint32 race = 1;
  // 投票する馬の馬番
  uint32 horse = 2;
  JWT jwt = 3;
}
message VoteResponse {}

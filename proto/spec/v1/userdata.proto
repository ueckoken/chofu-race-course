syntax = "proto3";

package spec.v1;

import "google/protobuf/timestamp.proto";
import "vendor/protoc-gen-validate/validate.proto";

option go_package = "github.com/ueckoken/chofu-race-course/go/_proto/spec/v1";

// ユーザのデータをやり取りするサービス
service UserDataService {
  // 要ユーザ認証: UserIdからUser情報を取得する
  rpc UserData(UserDataRequest) returns (UserDataResponse) {}
  // 新規Userを作成する
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {}
  // 管理者としてログインを試みる
  rpc LoginAsAdmin(LoginAsAdminRequest) returns (LoginAsAdminResponse) {}
}
// ユーザを表現する型
message User {
  // ユーザID。他のIDはuint32であるが、ユーザIDのみJWTを使う都合上string。
  string id = 1 [(validate.rules).string = {
    min_bytes: 16,
    max_bytes: 1024,
  }];
}
message Users {
  repeated User users = 1;
}
message UserDataRequest {
  JWT jwt = 1 [(validate.rules).message.required = true];
}
// JWTトークン
message JWT {
  string token = 1 [(validate.rules).string = {
    min_len: 1
  }];
}
message UserDataResponse {
  User user = 1;
}
message CreateUserRequest {}
message CreateUserResponse {
  User user = 1;
  JWT jwt = 2;
}
message LoginAsAdminRequest {
  string password = 1 [(validate.rules).string.min_bytes = 1];
}
message LoginAsAdminResponse {
  JWT admin_jwt = 3;
}

service HorseDataService {
  rpc HorseData(HorseDataRequest) returns (HorseDataResponse) {}
  rpc AllHorseData(AllHorseDataRequest) returns (AllHorseDataResponse) {}
  //要Admin認証
  rpc RegisterHorse(RegisterHorseRequest) returns (RegisterHorseResponse) {}
  //要Admin認証
  rpc EditHorse(EditHorseRequest) returns (EditHorseResponse) {}
}
message Horse {
  uint32 id = 1 [(validate.rules).uint32.gte = 1];
  // 馬の名前
  string name = 2 [(validate.rules).string.pattern = "^\\p{Katakana}(\\p{Katakana}|ー){1,8}$"];
}
message HorseDetail {
  Horse data = 1 [(validate.rules).message.required = true];
  string owner = 2 [(validate.rules).string = {
    min_len: 2,
    max_len: 256
  }];
  message Image {
    enum ImageType {
      IMAGE_TYPE_UNSPECIFIED = 0;
      IMAGE_TYPE_PNG = 1;
      IMAGE_TYPE_JPEG = 2;
      IMAGE_TYPE_GIF = 3;
    }
    // 拡張子
    ImageType type = 1 [(validate.rules).enum = {
      not_in: [
        0
      ],
      defined_only: true,
    }];
    // base64形式
    bytes data = 2 [(validate.rules).bytes.min_len = 1];
  }
  optional Image image = 3;
  // 勝利数
  uint32 wins = 4;
  // 試合数
  uint32 matches = 5;
  // 次走、未定ならnull
  optional Race next = 6;
  // 出走履歴のそれぞれ
  message History {
    // 出走したレース
    Race race = 1 [(validate.rules).message.required = true];
    // その日の何番目のレースか
    uint32 order = 2 [(validate.rules).uint32.gte = 1];
    // 順位
    RaceOrder result = 3 [(validate.rules).message.required = true];
  }
  // レース出走履歴
  repeated History histories = 7;
}

message HorseDetails {
  repeated HorseDetail horse_details = 1;
}
message HorseDataRequest {
  uint32 id = 1 [(validate.rules).uint32.gte = 1];
}
message HorseDataResponse {
  HorseDetail horse = 1;
}
message AllHorseDataRequest {}
message AllHorseDataResponse {
  // 登録している馬が1頭もいない場合はエラーではなく[]を返す。
  repeated Horse horses = 1;
}
// HorseDetailの初期値 id: id++, image: null, wins: 0, matches: 0, next: null,
// histories: []
message RegisterHorseRequest {
  string name = 1 [(validate.rules).string.pattern = "^\\p{Katakana}(\\p{Katakana}|ー){1,8}$"];
  // 所有者名
  string owner = 2 [(validate.rules).string = {
    min_len: 2,
    max_len: 256
  }];
  // admin JWT
  JWT admin_jwt = 3 [(validate.rules).message.required = true];
}
message RegisterHorseResponse {}

// 非nullで渡された値を更新する
message EditHorseRequest {
  // 対象を指定するため必須
  uint32 id = 1 [(validate.rules).uint32.gte = 1];
  optional string name = 2;
  optional string owner = 3;
  optional HorseDetail.Image image = 4;
  // admin JWT
  JWT admin_jwt = 5 [(validate.rules).message.required = true];
}
message EditHorseResponse {}

service RaceDataService {
  rpc AllRaceData(AllRaceDataRequest) returns (AllRaceDataResponse) {}
  rpc RaceData(RaceDataRequest) returns (RaceDataResponse) {}
  //要Admin認証
  rpc RegisterRace(RegisterRaceRequest) returns (RegisterRaceResponse) {}
  //要Admin認証
  rpc RegisterRaceResult(RegisterRaceResultRequest) returns (RegisterRaceResultResponse) {}
  //要Admin認証
  rpc EditRace(EditRaceRequest) returns (EditRaceResponse) {}
}
message Race {
  uint32 id = 1 [(validate.rules).uint32.gte = 1];
  string name = 2 [(validate.rules).string.min_len = 1];
  // 第nレースのnのように、その日の何番目のレースなのかを指定する。1オリジン。
  uint32 order = 3 [(validate.rules).uint32.gte = 1];
  google.protobuf.Timestamp start = 4 [(validate.rules).timestamp.required = true];
  bool is_finished = 5;
}
message RaceOrder {
  enum NoteType {
    NOTE_TYPE_UNSPECIFIED = 0;
    // 出走取消。止むを得ず馬を出走させられなかった場合。
    NOTE_TYPE_CANCEL = 1;
    // 競争中止。発走したがゴールできなかった場合。
    NOTE_TYPE_GIVEUP = 2;
    // 競争除外。検査不合格などでレースに出走できなかった場合。
    NOTE_TYPE_EXCLUDE = 3;
  }
  oneof order_oneof {
    option (validate.required) = true;
    // 順位。最も早くゴールしたときに1。
    uint32 order = 1 [(validate.rules).uint32.gte = 1];
    NoteType note = 2 [(validate.rules).enum = {
      defined_only: true,
      not_in: [
        0
      ]
    }];
  }
}
message RaceDetail {
  Race data = 1 [(validate.rules).message.required = true];
  string description = 2;
  message Member {
    RaceOrder order = 1 [(validate.rules).message.required = true];
    Horse horse = 2 [(validate.rules).message.required = true];
    double odds = 3 [(validate.rules).double.gte = 1];
    uint32 popularity = 4 [(validate.rules).uint32.gte = 1];
  }
  repeated Member members = 4;
  google.protobuf.Timestamp vote_begin = 5 [(validate.rules).timestamp.required = true];
  google.protobuf.Timestamp vote_end = 6 [(validate.rules).timestamp.required = true];
}

message RaceDetails {
  repeated RaceDetail race_details = 1;
}
message RaceDataRequest {
  uint32 id = 1 [(validate.rules).uint32.gte = 1];
}
message RaceDataResponse {
  RaceDetail race = 1;
}
message AllRaceDataRequest {}
message AllRaceDataResponse {
  repeated Race races = 1;
}
// RaceDetailの初期値 id: id++, is_finished: false, members: [], vote_begin:
// start - n, vote_end: start - m
message RegisterRaceRequest {
  string name = 1 [(validate.rules).string.min_len = 1];
  // その日の何番目のレースか
  uint32 order = 2 [(validate.rules).uint32.gte = 1];
  // 出走時刻
  google.protobuf.Timestamp start = 3 [(validate.rules).timestamp.required = true];
  // コースなどの詳細説明
  string description = 4;
  // admin JWT
  JWT admin_jwt = 5 [(validate.rules).message.required = true];
}
message RegisterRaceResponse {}
message RegisterRaceResultRequest {
  // 対象を指定するため必須
  uint32 id = 1 [(validate.rules).uint32.gte = 1];
  repeated RaceDetail.Member members = 2;
  // admin JWT
  JWT admin_jwt = 3 [(validate.rules).message.required = true];
}
message RegisterRaceResultResponse {}
// 値が入ってたら更新する。
message EditRaceRequest {
  // 対象を指定するため必須
  uint32 id = 1 [(validate.rules).uint32.gte = 1];
  optional string name = 2;
  // 第nレースのnのように、その日の何番目のレースなのかを指定する。1オリジン。
  optional uint32 order = 3;
  optional google.protobuf.Timestamp start = 4;
  optional string description = 5;
  // 出走表決定も着順確定も同じフィールドを使うけどとりあえずは運用でカバーします
  repeated RaceDetail.Member members = 6;
  // admin JWT
  JWT admin_jwt = 7 [(validate.rules).message.required = true];
}
message EditRaceResponse {}

service VoteService {
  // 要ユーザ認証: 投票する
  rpc Vote(VoteRequest) returns (VoteResponse) {}
}
message VoteRequest {
  // 投票するレースのID
  uint32 race = 1;
  // 投票する馬の馬番
  uint32 horse = 2;
  JWT jwt = 3;
}
message VoteResponse {}

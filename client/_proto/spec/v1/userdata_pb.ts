// @generated by protoc-gen-es v0.1.1 with parameter "target=ts"
// @generated from file spec/v1/userdata.proto (package spec.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3, Timestamp} from "@bufbuild/protobuf";

/**
 * ユーザを表現する型
 *
 * @generated from message spec.v1.User
 */
export class User extends Message<User> {
  /**
   * ユーザID。他のIDはuint32であるが、ユーザIDのみJWTを使う都合上string。
   *
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.v1.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * @generated from message spec.v1.UserDataRequest
 */
export class UserDataRequest extends Message<UserDataRequest> {
  /**
   * @generated from field: spec.v1.JWT jwt = 1;
   */
  jwt?: JWT;

  constructor(data?: PartialMessage<UserDataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.v1.UserDataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "jwt", kind: "message", T: JWT },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserDataRequest {
    return new UserDataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserDataRequest {
    return new UserDataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserDataRequest {
    return new UserDataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UserDataRequest | PlainMessage<UserDataRequest> | undefined, b: UserDataRequest | PlainMessage<UserDataRequest> | undefined): boolean {
    return proto3.util.equals(UserDataRequest, a, b);
  }
}

/**
 * JWTトークン
 *
 * @generated from message spec.v1.JWT
 */
export class JWT extends Message<JWT> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  constructor(data?: PartialMessage<JWT>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.v1.JWT";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JWT {
    return new JWT().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JWT {
    return new JWT().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JWT {
    return new JWT().fromJsonString(jsonString, options);
  }

  static equals(a: JWT | PlainMessage<JWT> | undefined, b: JWT | PlainMessage<JWT> | undefined): boolean {
    return proto3.util.equals(JWT, a, b);
  }
}

/**
 * @generated from message spec.v1.UserDataResponse
 */
export class UserDataResponse extends Message<UserDataResponse> {
  /**
   * @generated from field: spec.v1.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<UserDataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.v1.UserDataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserDataResponse {
    return new UserDataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserDataResponse {
    return new UserDataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserDataResponse {
    return new UserDataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UserDataResponse | PlainMessage<UserDataResponse> | undefined, b: UserDataResponse | PlainMessage<UserDataResponse> | undefined): boolean {
    return proto3.util.equals(UserDataResponse, a, b);
  }
}

/**
 * @generated from message spec.v1.CreateUserRequest
 */
export class CreateUserRequest extends Message<CreateUserRequest> {
  /**
   * @generated from field: spec.v1.User user = 1 [deprecated = true];
   * @deprecated
   */
  user?: User;

  constructor(data?: PartialMessage<CreateUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.v1.CreateUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateUserRequest {
    return new CreateUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateUserRequest {
    return new CreateUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateUserRequest {
    return new CreateUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateUserRequest | PlainMessage<CreateUserRequest> | undefined, b: CreateUserRequest | PlainMessage<CreateUserRequest> | undefined): boolean {
    return proto3.util.equals(CreateUserRequest, a, b);
  }
}

/**
 * @generated from message spec.v1.CreateUserResponse
 */
export class CreateUserResponse extends Message<CreateUserResponse> {
  /**
   * @generated from field: spec.v1.User user = 1;
   */
  user?: User;

  /**
   * @generated from field: spec.v1.JWT jwt = 2;
   */
  jwt?: JWT;

  constructor(data?: PartialMessage<CreateUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.v1.CreateUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
    { no: 2, name: "jwt", kind: "message", T: JWT },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateUserResponse {
    return new CreateUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateUserResponse {
    return new CreateUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateUserResponse {
    return new CreateUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateUserResponse | PlainMessage<CreateUserResponse> | undefined, b: CreateUserResponse | PlainMessage<CreateUserResponse> | undefined): boolean {
    return proto3.util.equals(CreateUserResponse, a, b);
  }
}

/**
 * @generated from message spec.v1.Horse
 */
export class Horse extends Message<Horse> {
  /**
   * @generated from field: uint32 id = 1;
   */
  id = 0;

  /**
   * 馬の名前
   *
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<Horse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.v1.Horse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Horse {
    return new Horse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Horse {
    return new Horse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Horse {
    return new Horse().fromJsonString(jsonString, options);
  }

  static equals(a: Horse | PlainMessage<Horse> | undefined, b: Horse | PlainMessage<Horse> | undefined): boolean {
    return proto3.util.equals(Horse, a, b);
  }
}

/**
 * @generated from message spec.v1.HorseDetail
 */
export class HorseDetail extends Message<HorseDetail> {
  /**
   * @generated from field: spec.v1.Horse data = 1;
   */
  data?: Horse;

  /**
   * @generated from field: string owner = 2;
   */
  owner = "";

  /**
   * @generated from field: optional spec.v1.HorseDetail.Image image = 3;
   */
  image?: HorseDetail_Image;

  /**
   * 勝利数
   *
   * @generated from field: uint32 wins = 4;
   */
  wins = 0;

  /**
   * 試合数
   *
   * @generated from field: uint32 matches = 5;
   */
  matches = 0;

  /**
   * 次走、未定ならnull
   *
   * @generated from field: optional spec.v1.Race next = 6;
   */
  next?: Race;

  /**
   * @generated from field: repeated spec.v1.HorseDetail.History histories = 7;
   */
  histories: HorseDetail_History[] = [];

  constructor(data?: PartialMessage<HorseDetail>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.v1.HorseDetail";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: Horse },
    { no: 2, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "image", kind: "message", T: HorseDetail_Image, opt: true },
    { no: 4, name: "wins", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "matches", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 6, name: "next", kind: "message", T: Race, opt: true },
    { no: 7, name: "histories", kind: "message", T: HorseDetail_History, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HorseDetail {
    return new HorseDetail().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HorseDetail {
    return new HorseDetail().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HorseDetail {
    return new HorseDetail().fromJsonString(jsonString, options);
  }

  static equals(a: HorseDetail | PlainMessage<HorseDetail> | undefined, b: HorseDetail | PlainMessage<HorseDetail> | undefined): boolean {
    return proto3.util.equals(HorseDetail, a, b);
  }
}

/**
 * @generated from message spec.v1.HorseDetail.Image
 */
export class HorseDetail_Image extends Message<HorseDetail_Image> {
  /**
   * 拡張子
   *
   * @generated from field: spec.v1.HorseDetail.Image.ImageType type = 1;
   */
  type = HorseDetail_Image_ImageType.UNSPECIFIED;

  /**
   * base64形式
   *
   * @generated from field: bytes data = 2;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<HorseDetail_Image>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.v1.HorseDetail.Image";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(HorseDetail_Image_ImageType) },
    { no: 2, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HorseDetail_Image {
    return new HorseDetail_Image().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HorseDetail_Image {
    return new HorseDetail_Image().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HorseDetail_Image {
    return new HorseDetail_Image().fromJsonString(jsonString, options);
  }

  static equals(a: HorseDetail_Image | PlainMessage<HorseDetail_Image> | undefined, b: HorseDetail_Image | PlainMessage<HorseDetail_Image> | undefined): boolean {
    return proto3.util.equals(HorseDetail_Image, a, b);
  }
}

/**
 * @generated from enum spec.v1.HorseDetail.Image.ImageType
 */
export enum HorseDetail_Image_ImageType {
  /**
   * @generated from enum value: IMAGE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: IMAGE_TYPE_PNG = 1;
   */
  PNG = 1,

  /**
   * @generated from enum value: IMAGE_TYPE_JPEG = 2;
   */
  JPEG = 2,

  /**
   * @generated from enum value: IMAGE_TYPE_GIF = 3;
   */
  GIF = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(HorseDetail_Image_ImageType)
proto3.util.setEnumType(HorseDetail_Image_ImageType, "spec.v1.HorseDetail.Image.ImageType", [
  { no: 0, name: "IMAGE_TYPE_UNSPECIFIED" },
  { no: 1, name: "IMAGE_TYPE_PNG" },
  { no: 2, name: "IMAGE_TYPE_JPEG" },
  { no: 3, name: "IMAGE_TYPE_GIF" },
]);

/**
 * 出走履歴のそれぞれ
 *
 * @generated from message spec.v1.HorseDetail.History
 */
export class HorseDetail_History extends Message<HorseDetail_History> {
  /**
   * 出走したレース
   *
   * @generated from field: spec.v1.Race race = 1;
   */
  race?: Race;

  /**
   * その日の何番目のレースか
   *
   * @generated from field: uint32 order = 2;
   */
  order = 0;

  /**
   * 順位
   *
   * @generated from field: spec.v1.RaceOrder result = 3;
   */
  result?: RaceOrder;

  constructor(data?: PartialMessage<HorseDetail_History>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.v1.HorseDetail.History";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "race", kind: "message", T: Race },
    { no: 2, name: "order", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "result", kind: "message", T: RaceOrder },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HorseDetail_History {
    return new HorseDetail_History().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HorseDetail_History {
    return new HorseDetail_History().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HorseDetail_History {
    return new HorseDetail_History().fromJsonString(jsonString, options);
  }

  static equals(a: HorseDetail_History | PlainMessage<HorseDetail_History> | undefined, b: HorseDetail_History | PlainMessage<HorseDetail_History> | undefined): boolean {
    return proto3.util.equals(HorseDetail_History, a, b);
  }
}

/**
 * @generated from message spec.v1.HorseDataRequest
 */
export class HorseDataRequest extends Message<HorseDataRequest> {
  /**
   * @generated from field: uint32 id = 1;
   */
  id = 0;

  constructor(data?: PartialMessage<HorseDataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.v1.HorseDataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HorseDataRequest {
    return new HorseDataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HorseDataRequest {
    return new HorseDataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HorseDataRequest {
    return new HorseDataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: HorseDataRequest | PlainMessage<HorseDataRequest> | undefined, b: HorseDataRequest | PlainMessage<HorseDataRequest> | undefined): boolean {
    return proto3.util.equals(HorseDataRequest, a, b);
  }
}

/**
 * @generated from message spec.v1.HorseDataResponse
 */
export class HorseDataResponse extends Message<HorseDataResponse> {
  /**
   * @generated from field: spec.v1.HorseDetail horse = 1;
   */
  horse?: HorseDetail;

  constructor(data?: PartialMessage<HorseDataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.v1.HorseDataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "horse", kind: "message", T: HorseDetail },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HorseDataResponse {
    return new HorseDataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HorseDataResponse {
    return new HorseDataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HorseDataResponse {
    return new HorseDataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: HorseDataResponse | PlainMessage<HorseDataResponse> | undefined, b: HorseDataResponse | PlainMessage<HorseDataResponse> | undefined): boolean {
    return proto3.util.equals(HorseDataResponse, a, b);
  }
}

/**
 * @generated from message spec.v1.AllHorseDataRequest
 */
export class AllHorseDataRequest extends Message<AllHorseDataRequest> {
  constructor(data?: PartialMessage<AllHorseDataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.v1.AllHorseDataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AllHorseDataRequest {
    return new AllHorseDataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AllHorseDataRequest {
    return new AllHorseDataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AllHorseDataRequest {
    return new AllHorseDataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AllHorseDataRequest | PlainMessage<AllHorseDataRequest> | undefined, b: AllHorseDataRequest | PlainMessage<AllHorseDataRequest> | undefined): boolean {
    return proto3.util.equals(AllHorseDataRequest, a, b);
  }
}

/**
 * @generated from message spec.v1.AllHorseDataResponse
 */
export class AllHorseDataResponse extends Message<AllHorseDataResponse> {
  /**
   * @generated from field: repeated spec.v1.Horse horses = 1;
   */
  horses: Horse[] = [];

  constructor(data?: PartialMessage<AllHorseDataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.v1.AllHorseDataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "horses", kind: "message", T: Horse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AllHorseDataResponse {
    return new AllHorseDataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AllHorseDataResponse {
    return new AllHorseDataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AllHorseDataResponse {
    return new AllHorseDataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AllHorseDataResponse | PlainMessage<AllHorseDataResponse> | undefined, b: AllHorseDataResponse | PlainMessage<AllHorseDataResponse> | undefined): boolean {
    return proto3.util.equals(AllHorseDataResponse, a, b);
  }
}

/**
 * HorseDetailの初期値 id: id++, image: null, wins: 0, matches: 0, next: null, histories: []
 *
 * @generated from message spec.v1.RegisterHorseRequest
 */
export class RegisterHorseRequest extends Message<RegisterHorseRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * 所有者名
   *
   * @generated from field: string owner = 2;
   */
  owner = "";

  constructor(data?: PartialMessage<RegisterHorseRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.v1.RegisterHorseRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterHorseRequest {
    return new RegisterHorseRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterHorseRequest {
    return new RegisterHorseRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterHorseRequest {
    return new RegisterHorseRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterHorseRequest | PlainMessage<RegisterHorseRequest> | undefined, b: RegisterHorseRequest | PlainMessage<RegisterHorseRequest> | undefined): boolean {
    return proto3.util.equals(RegisterHorseRequest, a, b);
  }
}

/**
 * @generated from message spec.v1.RegisterHorseResponse
 */
export class RegisterHorseResponse extends Message<RegisterHorseResponse> {
  constructor(data?: PartialMessage<RegisterHorseResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.v1.RegisterHorseResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterHorseResponse {
    return new RegisterHorseResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterHorseResponse {
    return new RegisterHorseResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterHorseResponse {
    return new RegisterHorseResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterHorseResponse | PlainMessage<RegisterHorseResponse> | undefined, b: RegisterHorseResponse | PlainMessage<RegisterHorseResponse> | undefined): boolean {
    return proto3.util.equals(RegisterHorseResponse, a, b);
  }
}

/**
 * @generated from message spec.v1.Race
 */
export class Race extends Message<Race> {
  /**
   * @generated from field: uint32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: uint32 order = 3;
   */
  order = 0;

  /**
   * @generated from field: google.protobuf.Timestamp start = 4;
   */
  start?: Timestamp;

  /**
   * @generated from field: bool is_finished = 5;
   */
  isFinished = false;

  constructor(data?: PartialMessage<Race>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.v1.Race";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "order", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "start", kind: "message", T: Timestamp },
    { no: 5, name: "is_finished", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Race {
    return new Race().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Race {
    return new Race().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Race {
    return new Race().fromJsonString(jsonString, options);
  }

  static equals(a: Race | PlainMessage<Race> | undefined, b: Race | PlainMessage<Race> | undefined): boolean {
    return proto3.util.equals(Race, a, b);
  }
}

/**
 * @generated from message spec.v1.RaceOrder
 */
export class RaceOrder extends Message<RaceOrder> {
  /**
   * @generated from oneof spec.v1.RaceOrder.order_oneof
   */
  orderOneof: {
    /**
     * 順位。最も早くゴールしたときに1。
     *
     * @generated from field: uint32 order = 1;
     */
    value: number;
    case: "order";
  } | {
    /**
     * @generated from field: spec.v1.RaceOrder.NoteType note = 2;
     */
    value: RaceOrder_NoteType;
    case: "note";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<RaceOrder>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.v1.RaceOrder";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order", kind: "scalar", T: 13 /* ScalarType.UINT32 */, oneof: "order_oneof" },
    { no: 2, name: "note", kind: "enum", T: proto3.getEnumType(RaceOrder_NoteType), oneof: "order_oneof" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RaceOrder {
    return new RaceOrder().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RaceOrder {
    return new RaceOrder().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RaceOrder {
    return new RaceOrder().fromJsonString(jsonString, options);
  }

  static equals(a: RaceOrder | PlainMessage<RaceOrder> | undefined, b: RaceOrder | PlainMessage<RaceOrder> | undefined): boolean {
    return proto3.util.equals(RaceOrder, a, b);
  }
}

/**
 * @generated from enum spec.v1.RaceOrder.NoteType
 */
export enum RaceOrder_NoteType {
  /**
   * @generated from enum value: NOTE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * 出走取消
   *
   * @generated from enum value: NOTE_TYPE_CANCEL = 1;
   */
  CANCEL = 1,

  /**
   * 競争中止
   *
   * @generated from enum value: NOTE_TYPE_GIVEUP = 2;
   */
  GIVEUP = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(RaceOrder_NoteType)
proto3.util.setEnumType(RaceOrder_NoteType, "spec.v1.RaceOrder.NoteType", [
  { no: 0, name: "NOTE_TYPE_UNSPECIFIED" },
  { no: 1, name: "NOTE_TYPE_CANCEL" },
  { no: 2, name: "NOTE_TYPE_GIVEUP" },
]);

/**
 * @generated from message spec.v1.RaceDetail
 */
export class RaceDetail extends Message<RaceDetail> {
  /**
   * @generated from field: spec.v1.Race data = 1;
   */
  data?: Race;

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: repeated spec.v1.RaceDetail.Member members = 4;
   */
  members: RaceDetail_Member[] = [];

  /**
   * @generated from field: google.protobuf.Timestamp vote_begin = 5;
   */
  voteBegin?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp vote_end = 6;
   */
  voteEnd?: Timestamp;

  constructor(data?: PartialMessage<RaceDetail>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.v1.RaceDetail";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: Race },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "members", kind: "message", T: RaceDetail_Member, repeated: true },
    { no: 5, name: "vote_begin", kind: "message", T: Timestamp },
    { no: 6, name: "vote_end", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RaceDetail {
    return new RaceDetail().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RaceDetail {
    return new RaceDetail().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RaceDetail {
    return new RaceDetail().fromJsonString(jsonString, options);
  }

  static equals(a: RaceDetail | PlainMessage<RaceDetail> | undefined, b: RaceDetail | PlainMessage<RaceDetail> | undefined): boolean {
    return proto3.util.equals(RaceDetail, a, b);
  }
}

/**
 * @generated from message spec.v1.RaceDetail.Member
 */
export class RaceDetail_Member extends Message<RaceDetail_Member> {
  /**
   * @generated from field: spec.v1.RaceOrder order = 1;
   */
  order?: RaceOrder;

  /**
   * @generated from field: spec.v1.Horse horse = 2;
   */
  horse?: Horse;

  /**
   * @generated from field: double odds = 3;
   */
  odds = 0;

  /**
   * @generated from field: uint32 popularity = 4;
   */
  popularity = 0;

  constructor(data?: PartialMessage<RaceDetail_Member>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.v1.RaceDetail.Member";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order", kind: "message", T: RaceOrder },
    { no: 2, name: "horse", kind: "message", T: Horse },
    { no: 3, name: "odds", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 4, name: "popularity", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RaceDetail_Member {
    return new RaceDetail_Member().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RaceDetail_Member {
    return new RaceDetail_Member().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RaceDetail_Member {
    return new RaceDetail_Member().fromJsonString(jsonString, options);
  }

  static equals(a: RaceDetail_Member | PlainMessage<RaceDetail_Member> | undefined, b: RaceDetail_Member | PlainMessage<RaceDetail_Member> | undefined): boolean {
    return proto3.util.equals(RaceDetail_Member, a, b);
  }
}

/**
 * @generated from message spec.v1.RaceDataRequest
 */
export class RaceDataRequest extends Message<RaceDataRequest> {
  /**
   * @generated from field: uint32 id = 1;
   */
  id = 0;

  constructor(data?: PartialMessage<RaceDataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.v1.RaceDataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RaceDataRequest {
    return new RaceDataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RaceDataRequest {
    return new RaceDataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RaceDataRequest {
    return new RaceDataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RaceDataRequest | PlainMessage<RaceDataRequest> | undefined, b: RaceDataRequest | PlainMessage<RaceDataRequest> | undefined): boolean {
    return proto3.util.equals(RaceDataRequest, a, b);
  }
}

/**
 * @generated from message spec.v1.RaceDataResponse
 */
export class RaceDataResponse extends Message<RaceDataResponse> {
  /**
   * @generated from field: spec.v1.RaceDetail race = 1;
   */
  race?: RaceDetail;

  constructor(data?: PartialMessage<RaceDataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.v1.RaceDataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "race", kind: "message", T: RaceDetail },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RaceDataResponse {
    return new RaceDataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RaceDataResponse {
    return new RaceDataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RaceDataResponse {
    return new RaceDataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RaceDataResponse | PlainMessage<RaceDataResponse> | undefined, b: RaceDataResponse | PlainMessage<RaceDataResponse> | undefined): boolean {
    return proto3.util.equals(RaceDataResponse, a, b);
  }
}

/**
 * @generated from message spec.v1.RangeRaceDataRequest
 */
export class RangeRaceDataRequest extends Message<RangeRaceDataRequest> {
  /**
   * 指定した時間を含む、指定した時間からのデータを取得する。指定しなかったときは0(=1970年1月1日)と見なす。
   *
   * @generated from field: optional google.protobuf.Timestamp begin = 1;
   */
  begin?: Timestamp;

  /**
   * 指定した時間を含む、指定した時間までのデータを取得する。指定しなかったときは取得できる最新まで取得する。
   *
   * @generated from field: optional google.protobuf.Timestamp end = 2;
   */
  end?: Timestamp;

  constructor(data?: PartialMessage<RangeRaceDataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.v1.RangeRaceDataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "begin", kind: "message", T: Timestamp, opt: true },
    { no: 2, name: "end", kind: "message", T: Timestamp, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RangeRaceDataRequest {
    return new RangeRaceDataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RangeRaceDataRequest {
    return new RangeRaceDataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RangeRaceDataRequest {
    return new RangeRaceDataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RangeRaceDataRequest | PlainMessage<RangeRaceDataRequest> | undefined, b: RangeRaceDataRequest | PlainMessage<RangeRaceDataRequest> | undefined): boolean {
    return proto3.util.equals(RangeRaceDataRequest, a, b);
  }
}

/**
 * @generated from message spec.v1.RangeRaceDataResponse
 */
export class RangeRaceDataResponse extends Message<RangeRaceDataResponse> {
  /**
   * @generated from field: repeated spec.v1.Race races = 1;
   */
  races: Race[] = [];

  constructor(data?: PartialMessage<RangeRaceDataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.v1.RangeRaceDataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "races", kind: "message", T: Race, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RangeRaceDataResponse {
    return new RangeRaceDataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RangeRaceDataResponse {
    return new RangeRaceDataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RangeRaceDataResponse {
    return new RangeRaceDataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RangeRaceDataResponse | PlainMessage<RangeRaceDataResponse> | undefined, b: RangeRaceDataResponse | PlainMessage<RangeRaceDataResponse> | undefined): boolean {
    return proto3.util.equals(RangeRaceDataResponse, a, b);
  }
}

/**
 * RaceDetailの初期値 id: id++, is_finished: false, members: [], vote_begin: start - n, vote_end: start - m
 *
 * @generated from message spec.v1.RegisterRaceRequest
 */
export class RegisterRaceRequest extends Message<RegisterRaceRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * その日の何番目のレースか
   *
   * @generated from field: uint32 order = 2;
   */
  order = 0;

  /**
   * 出走時刻
   *
   * @generated from field: google.protobuf.Timestamp start = 3;
   */
  start?: Timestamp;

  /**
   * コースなどの詳細説明
   *
   * @generated from field: string description = 4;
   */
  description = "";

  constructor(data?: PartialMessage<RegisterRaceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.v1.RegisterRaceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "order", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "start", kind: "message", T: Timestamp },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterRaceRequest {
    return new RegisterRaceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterRaceRequest {
    return new RegisterRaceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterRaceRequest {
    return new RegisterRaceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterRaceRequest | PlainMessage<RegisterRaceRequest> | undefined, b: RegisterRaceRequest | PlainMessage<RegisterRaceRequest> | undefined): boolean {
    return proto3.util.equals(RegisterRaceRequest, a, b);
  }
}

/**
 * @generated from message spec.v1.RegisterRaceResponse
 */
export class RegisterRaceResponse extends Message<RegisterRaceResponse> {
  constructor(data?: PartialMessage<RegisterRaceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.v1.RegisterRaceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterRaceResponse {
    return new RegisterRaceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterRaceResponse {
    return new RegisterRaceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterRaceResponse {
    return new RegisterRaceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterRaceResponse | PlainMessage<RegisterRaceResponse> | undefined, b: RegisterRaceResponse | PlainMessage<RegisterRaceResponse> | undefined): boolean {
    return proto3.util.equals(RegisterRaceResponse, a, b);
  }
}

/**
 * @generated from message spec.v1.VoteRequest
 */
export class VoteRequest extends Message<VoteRequest> {
  /**
   * 投票するレースのID
   *
   * @generated from field: uint32 race = 1;
   */
  race = 0;

  /**
   * 投票する馬の馬番
   *
   * @generated from field: uint32 horse = 2;
   */
  horse = 0;

  /**
   * @generated from field: spec.v1.JWT jwt = 3;
   */
  jwt?: JWT;

  constructor(data?: PartialMessage<VoteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.v1.VoteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "race", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "horse", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "jwt", kind: "message", T: JWT },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VoteRequest {
    return new VoteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VoteRequest {
    return new VoteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VoteRequest {
    return new VoteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: VoteRequest | PlainMessage<VoteRequest> | undefined, b: VoteRequest | PlainMessage<VoteRequest> | undefined): boolean {
    return proto3.util.equals(VoteRequest, a, b);
  }
}

/**
 * @generated from message spec.v1.VoteResponse
 */
export class VoteResponse extends Message<VoteResponse> {
  constructor(data?: PartialMessage<VoteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.v1.VoteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VoteResponse {
    return new VoteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VoteResponse {
    return new VoteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VoteResponse {
    return new VoteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: VoteResponse | PlainMessage<VoteResponse> | undefined, b: VoteResponse | PlainMessage<VoteResponse> | undefined): boolean {
    return proto3.util.equals(VoteResponse, a, b);
  }
}

